##########################################################################
#  Library Makeblock
##########################################################################

Library:
  name: Makeblock
  description: Makeblock
  color: 10 134 152
  menu:
  - me_mbot_move
  - me_led_rgb
  - me_mbot_tone
  - me_mbot_tone_off
  - me_mbot_switch
  - me_mbot_lightsensor
  - me_mbot_ir_sendcode
  - me_mbot_ir_getcode
  - me_ultrasonic_sensor
  - me_linefollower
  - me_motordriver
  - me_limit_switch
  - me_shutter
  - me_moveforward_1
  - me_motor_1
  - me_port_1
  - me_ircontrol_up
  - me_bluetooth_read
  - me_bluetooth_write
  - me_bluetooth_commands
  - me_bluetooth_command


##########################################################################
#  Definitions
##########################################################################

Definitions:
- me1: &MAKEBLOCK_PORT  [ me_port_1, me_port_2, me_port_3, me_port_4,
                          me_port_5, me_port_6, me_port_7, me_port_8 ]
- me2: &MAKEBLOCK_MOTOR [ me_motor_1, me_motor_2 ]
- me3: &MAKEBLOCK_MOVE  [ me_movestop_0, me_moveforward_1, me_movebackward_2,
                          me_moveleft_3, me_moveright_4 ]
- me4: &MAKEBLOCK_SHUTTER [me_shutter_1, me_shutter_2, me_shutter_3, .
                           me_shutter_4 ]
- me5: &MAKEBLOCK_IRCONTROL [ me_ircontrol_a, me_ircontrol_b, me_ircontrol_c,
                              me_ircontrol_d, me_ircontrol_e, me_ircontrol_f,
                              me_ircontrol_0, me_ircontrol_1, me_ircontrol_2,
                              me_ircontrol_3, me_ircontrol_4, me_ircontrol_5,
                              me_ircontrol_6, me_ircontrol_7, me_ircontrol_8,
                              me_ircontrol_9, me_ircontrol_up, me_ircontrol_down,
                              me_ircontrol_left, me_ircontrol_right,
                              me_ircontrol_ctrl ]


- me6: &MAKEBLOCK_CONST_CODE
    name: MeConstant
    headers: ['MeMCore.h' ]
    definitions:
    setup:
    code:
    - 'String genusName = this.getTranslator().getBlock(blockId).getGenusName();'
    - 'String constant[] = genusName.split("_");'
    - 'return codePrefix + constant[constant.length - 1] + codeSuffix;'


##########################################################################
#  Blocks
##########################################################################

Blocks:

- name: *MAKEBLOCK_PORT
  parameter:
  return:  {type: number, position: mirror}
  translator:
  <<: *MAKEBLOCK_CONST_CODE


- name: *MAKEBLOCK_MOTOR
  parameter:
  return:  {type: number, position: mirror}
  translator:
  <<: *MAKEBLOCK_CONST_CODE


- name: *MAKEBLOCK_MOVE
  parameter:
  return:  {type: number, position: mirror}
  translator:
  <<: *MAKEBLOCK_CONST_CODE


- name: *MAKEBLOCK_SHUTTER
  parameter:
  return:  {type: number, position: mirror}
  translator:
  <<: *MAKEBLOCK_CONST_CODE


- name: *MAKEBLOCK_IRCONTROL
  parameter:
  return:  {type: number, position: mirror}
  translator:
    name: MeIRControl
    headers: [ ]
    setup:
    code:
    - 'String genusName[] = this.getTranslator().getBlock(blockId).getGenusName().split("_");'
    - 'String ir_code = genusName[genusName.length - 1];'
    - 'if (ir_code == "a") return "69";'
    - 'if (ir_code == "b") return "70";'
    - 'if (ir_code == "c") return "71";'
    - 'if (ir_code == "d") return "68";'
    - 'if (ir_code == "e") return "67";'
    - 'if (ir_code == "f") return "13";'
    - 'if (ir_code == "0") return "22";'
    - 'if (ir_code == "1") return "12";'
    - 'if (ir_code == "2") return "24";'
    - 'if (ir_code == "3") return "94";'
    - 'if (ir_code == "4") return "8";'
    - 'if (ir_code == "5") return "28";'
    - 'if (ir_code == "6") return "90";'
    - 'if (ir_code == "7") return "66";'
    - 'if (ir_code == "8") return "82";'
    - 'if (ir_code == "9") return "74";'
    - 'if (ir_code == "up") return "64";'
    - 'if (ir_code == "down") return "25";'
    - 'if (ir_code == "left") return "7";'
    - 'if (ir_code == "right") return "9";'
    - 'if (ir_code == "ctrl") return "21";'
    - 'return "0";'


- name: me_mbot_move
  description: Makeblock move mBot
  properties:
    bg.me_mbot_move: Move mBot
  parameter:
  - {type: number, label: bc.me_moveTo_number, default: [me_moveforward_1, Forward]}
  - {type: number, label: bc.me_speed_number,  default: [number, '100']}
  translator:
    name: MeMbotMove
    headers: ['MeMCore.h']
    definitions:
    - '"MeDCMotor dcMotor1(M1);"'
    - '"MeDCMotor dcMotor2(M2);"'
    setup:
    code:
    - 'translator.addDefinitionCommand("\n" + '
    - '  "void _mBot_moveto(int dir, int speed) {\n" +'
    - '  "  speed = (speed > 255) ? 255 : ((speed < -255) ? -255 : speed);\n" +'
    - '  "  if (speed == 0) dir = 0;\n" +'
    - '  "  if (dir == 1) {        // Forward\n" +'
    - '  "    dcMotor1.run(-speed);\n" +'
    - '  "    dcMotor2.run(speed);\n" +'
    - '  "  } else if (dir == 2) { // Backward\n" +'
    - '  "    dcMotor1.run(speed);\n" +'
    - '  "    dcMotor2.run(-speed);\n" +'
    - '  "  } else if (dir == 3) { // Left\n" +'
    - '  "    dcMotor1.run(speed);\n" +'
    - '  "    dcMotor2.run(speed);\n" +'
    - '  "  } else if (dir == 4) { // Right\n" +'
    - '  "    dcMotor1.run(-speed);\n" +'
    - '  "    dcMotor2.run(-speed);\n" +'
    - '  "  } else {               // Stop\n" +'
    - '  "    dcMotor1.stop();\n" +'
    - '  "    dcMotor2.stop();\n" +'
    - '  "  };\n" +'
    - '  "};\n" );'
    - ''
    - 'return "_mBot_moveto(" + arg1 + ", " + arg2 + ");";'


- name: me_motordriver
  description: Makeblock DC Motor
  properties:
    bg.me_motordriver: Motor
    bg.me_motordriver.description: Motor can use M1, M2, Port_1 and Port_2.
  parameter:
  - {type: number, label: bc.me_motor_number, default: [me_motor_1, 'M1']}
  - {type: number, label: bc.me_speed_number, default: [number, '0']}
  translator:
    name: MeMotorDriver
    headers: ['MeMCore.h']
    definitions: ['"MeDCMotor dcMotor" + arg1 + "(M" + arg1 + ");"']
    setup:
    code:
    - 'TranslatorBlock block = this.getRequiredTranslatorBlockAtSocket(1);'
    - 'if(block instanceof NumberBlock) {'
    - '   int speed = Integer.parseInt(block.toCode());'
    - '   speed = speed > 255 ? 255 : (speed < -255 ? -255 : speed);'
    - '   if (Integer.parseInt(arg1) == 2) speed = -speed;'
    - '   if (speed == 0) {'
    - '      return "dcMotor" + arg1 + ".stop();";'
    - '   } else {'
    - '      return "dcMotor" + arg1 + ".run(" + speed + ");";'
    - '   }'
    - '} else {'
    - '   if (Integer.parseInt(arg1) == 2) {'
    - '      return "dcMotor" + arg1 + ".run(-(" + block.toCode() + "));";'
    - '   }'
    - '   else {'
    - '      return "dcMotor" + arg1 + ".run(" + block.toCode() + ");";'
    - '   }'
    - '}'


- name: me_led_rgb
  description: Makeblock mCore leds RGB
  properties:
    bg.me_led_rgb: Led RGB
  parameter:
  - {type: number, label: bc.me_led_num,   default: [number, '1']}
  - {type: number, label: bc.me_led_red,   default: [number, '255']}
  - {type: number, label: bc.me_led_green, default: [number, '255']}
  - {type: number, label: bc.me_led_blue,  default: [number, '255']}
  translator:
    name: MeLedRGB
    headers: ['MeMCore.h' ]
    definitions: ['"MeRGBLed rgbled(7, 2);"']
    setup:
    code:
    - 'String ret = "rgbled.setColor(" + arg1 + ", " + arg1 + ", " + arg2 + ", " + arg3 + ");";'
    - 'return ret + "\nrgbled.show();";'


- name: me_mbot_lightsensor
  description: Makeblock mBot Light Sensor
  properties:
    bg.me_mbot_lightsensor: Light sensor
  parameter:
  return: {type: number}
  translator:
    name: MeMbotLightSensor
    headers: ['MeMCore.h' ]
    definitions: ['"MeLightSensor mBotLightSensor(6);"']
    setup:
    code:
    - 'return codePrefix + "mBotLightSensor.read()" + codeSuffix;'


- name: me_mbot_ir_getcode
  description: Makeblock mBot InfraRed Receiver
  properties:
    bg.me_mbot_ir_getcode: Receive IR
  parameter:
  return: {type: number}
  translator:
    name: MeMbotIRGetcode
    headers: ['MeMCore.h' ]
    definitions: ['"MeIR mBotIR;"']
    setup:
    code:
    - 'return codePrefix + "mBotIR.getCode()" + codeSuffix;'


- name: me_mbot_ir_sendcode
  description: mBot Send data to Infrared emitter
  properties:
    bg.me_mbot_ir_sendcode: Send IR
    bg.me_mbot_ir_sendcode.description: Send data, with NEC format, to Infrared emitter
  parameter:
  - {type: number, label: bc.me_output_data,   default: [number, '60']}
  translator:
    name: MeMbotIRSendcode
    headers: ['MeMCore.h' ]
    definitions: ['"MeIR mBotIR;"']
    setup:
    code:
    - 'translator.addDefinitionCommand("\n" +'
    - '  "void _mBot_IRSendByte(uint8_t data) {\n" +'
    - '  "  union {\n" +'
    - '  "    struct {\n" +'
    - '  "      byte b3; byte b2; byte b1; byte b0;\n" +'
    - '  "    };\n" +'
    - '  "    long l;\n" +'
    - '  "  } ldata;\n" +'
    - '  "  ldata.b3 = ~data; ldata.b2 = data; ldata.b1 = 0x00; ldata.b0 = 0xff;\n" +'
    - '  "  mBotIR.sendNEC(ldata.l, 32);\n" +'
    - '  "  delay(20);\n" +'
    - '  "};\n" );'
    - ''
    - 'return "_mBot_IRSendByte((uint8_t)(" + arg1 + "));";'


- name: me_mbot_switch
  description: Makeblock mBot pushbutton switch
  properties:
    bg.me_mbot_switch: Push Button
  parameter:
  return: {type: boolean}
  translator:
    name: MeMbotSwitch
    headers: ['MeMCore.h' ]
    definitions:
    setup: ['"pinMode(A7, INPUT);"' ]
    code:
    - 'return codePrefix + "(analogRead(A7) < 512)" + codeSuffix;'


- name: me_mbot_tone
  description: Makeblock mBot buzzer tone
  properties:
    bg.me_mbot_tone: Buzzer
  parameter:
  - {type: number, label: bc.me_buzzer_freq,   default: [number, '440']}
  - {type: number, label: bc.me_buzzer_time,   default: [number, '100']}
  translator:
    name: MeMbotTone
    headers: ['MeMCore.h' ]
    definitions: ['"MeBuzzer buzzer;"' ]
    setup:
    code:
    - 'return "buzzer.tone(" + arg1 + ", " + arg2 + ");";'


- name: me_mbot_tone_off
  description: Makeblock mBot buzzer off
  properties:
    bg.me_mbot_tone_off: Buzzer Off
  parameter:
  return:
  translator:
    name: MeMbotToneOff
    headers: ['MeMCore.h' ]
    definitions: ['"MeBuzzer buzzer;"' ]
    setup:
    code:
    - 'return "buzzer.noTone();";'


- name: me_ultrasonic_sensor
  description: Makeblock Ultrasonic Sensor
  properties:
    bg.me_ultrasonic_sensor: Ultrasonic distance
    bg.me_ultrasonic_sensor.description: return distance between Object to Sensor.
  parameter:
  - {type: number, label: bc.me_port_number,   default: [me_port_3, 'Port 3']}
  return: {type: number}
  translator:
    name: MeUltrasonicSensor
    headers: ['MeMCore.h' ]
    definitions: ['"MeUltrasonicSensor ultraSensor" + arg1 + "(PORT_" + arg1 + ");"']
    setup:
    code:
    - 'return codePrefix + "(int)(10 * ultraSensor" + arg1 + ".distanceCm())" + codeSuffix;'


- name: me_line_follower
  description: Makeblock LineFollower
  properties:
    bg.me_linefollower: Line Follower
    bg.me_linefollower.description: Line follower. Return 1=Right sensor, 2=Left Sensort, 3=Right + Left sensors.
  parameter:
  - {type: number, label: bc.me_port_number,   default: [me_port_2, 'Port 2']}
  return: {type: number}
  translator:
    name: MeLineFollower
    headers: ['MeMCore.h' ]
    definitions: ['"MeLineFollower lineFollower" + arg1 + "(PORT_" + arg1 + ");"']
    setup:
    code:
    - 'return codePrefix + "lineFollower" + arg1 + ".readSensors()" + codeSuffix;'


- name: me_limit_switch
  description: Makeblock LimitSwitch
  properties:
    bg.me_limit_switch: Limit Switch
    bg.me_limit_switch.description: It sends a signal to the controller when it is triggered.
  parameter:
  - {type: number, label: bc.me_port_number,   default: [me_port_4, 'Port 4']}
  return: {type: number}
  translator:
    name: MeLimitSwitch
    headers: ['MeMCore.h' ]
    definitions: []
    setup:
    code:
    - 'return codePrefix + "switch" + arg1 + ".touched()" + codeSuffix;'


- name: me_shutter
  description: Makeblock Shutter For DSLR
  properties:
    bg.me_shutter: Shutter
    bg.me_shutter.description: It sends a signal to the DSLR Camera for shot and focus.
  parameter:
  - {type: number, label: bc.me_port_number,   default: [me_port_4, 'Port 4']}
  - {type: number, label: bc.me_shutter_state,   default: [me_shutter_1, Shot On']}
  translator:
    name: MeShutter
    headers: ['MeMCore.h' ]
    definitions: ['"MeShutter shutter" + arg1 + "(PORT_" + arg1 + ");"']
    setup:
    code:
    - 'int stateId = Integer.parseInt(arg2);'
    - 'String ret;'
    - 'if (stateId == 1) ret = ".shotOn()";'
    - 'else if (stateId == 2) ret = ".shotOff()";'
    - 'else if (stateId == 2) ret = ".focusOn()";'
    - 'else ret = ".focusOff()";'
    - 'return "shutter" + arg1 + ret + ";";'


- name: me_stepper_motor
  description: Makeblock Stepper Motor
  properties:
    bg.me_stepper_motor: Stepper
    bg.me_stepper_motor.description: Mini stepper motor driver base on A4988. Compatible with 4 and 6 wire stepper motors.
  parameter:
  - {type: number, label: bc.me_port_number,   default: [me_port_1, 'Port 1']}
  - {type: number, label: bc.me_speed_number,   default: [number, 10000']}
  - {type: number, label: bc.me_acceleration_number,   default: [number, 2000']}
  - {type: number, label: bc.me_moveTo_number,   default: [number, 3000']}
  - {type: cmd,    label: bc.me_stepper_finish }
  translator:
    name: MeStepperMotor
    headers: ['MeMCore.h' ]
    definitions: ['"MeStepperMotor stepper" + arg1 + "(PORT_" + arg1 + ");"']
    setup: ['"stepper" + arg1 + ".begin(STP_SIXTEENTH, " + arg2 + ", " + arg3 + ");"']
    code:
    - 'String ret = "stepper" + arg1 + ".moveTo(" + arg4 + ");\n";'
    - 'ret += "int distance = stepper" + arg1 + ".distanceToGo();\n";'
    - 'ret += "if (distance==0) {\n";'
    - 'TranslatorBlock execBlock = this.getTranslatorBlockAtSocket(4);'
    - 'String exec = "";'
    - 'while (execBlock != null) {'
    - '	exec += "\t" + execBlock.toCode() + "\n";'
    - '	execBlock = execBlock.nextTranslatorBlock();'
    - '}'
    - 'ret += exec + "\n};";'
    - 'return ret;'


- name: me_bluetooth_read
  description: Makeblock Bluetooth Read
  properties:
    bg.me_bluetooth_read: Bluetooth read
    bg.me_bluetooth_read.description: Bluetooth Read Byte Data
  parameter:
  - {type: number, label: bc.me_port_number,   default: [me_port_3, 'Port 3']}
  - {type: number, label: bc.me_input_data,   default: [variable_number, btRead']}
  - {type: cmd,    label: bc.then }
  translator:
    name: MeBluetoothRead
    headers: ['MeMCore.h' ]
    definitions: ['"MeBluetooth bluetooth" + arg1 + "(PORT_" + arg1 + ");"']
    setup: ['"bluetooth" + arg1 + ".begin(9600);"']
    code:
    - 'TranslatorBlock execBlock = this.getTranslatorBlockAtSocket(2);'
    - 'String exec = "";'
    - 'while (execBlock != null) {'
    - '	exec += execBlock.toCode()+ "\n";'
    - '	execBlock = execBlock.nextTranslatorBlock();'
    - '}'
    - 'return arg2 + "= bluetooth" + arg2 + ".read();\nif (" + arg2 + " > -1) {\n" + exec + "\n};";'


- name: me_bluetooth_write
  description: Makeblock Bluetooth Write
  properties:
    bg.me_bluetooth_write: Bluetooth write
    bg.me_bluetooth_write.description: Bluetooth Write Byte Data
  parameter:
  - {type: number, label: bc.me_port_number,   default: [me_port_3, 'Port 3']}
  - {type: number, label: bc.me_output_data,   default: [variable_number, btRead']}
  translator:
    name: MeBluetoothWrite
    headers: ['MeMCore.h' ]
    definitions: ['"MeBluetooth bluetooth" + arg1 + "(PORT_" + arg2 + ");"']
    setup: ['"bluetooth" + arg1 + ".begin(9600);"']
    code:
    - 'return "bluetooth" + arg1 + ".write(" + arg2 + ");";'


- name: me_bluetooth_commands
  description: Makeblock Bluetooth Commands
  properties:
    bg.me_bluetooth_commands: Bluetooth Commands
    bg.me_bluetooth_commands.description: Commands Parser For Android App's Communication.
  parameter:
  - {type: number, label: bc.me_port_number,   default: [me_port_3, 'Port 3']}
  - {type: cmd,    label: bc.then }
  translator:
    name: MeBluetoothCommands
    headers: ['MeMCore.h' ]
    definitions: []
    setup:
    code:
    - 'TranslatorBlock execBlock = this.getTranslatorBlockAtSocket(1);'
    - 'String exec = "if (bluetooth" + arg1 + ".paramAvailable()) {\n";'
    - 'while (execBlock != null) {'
    - '	exec += "\t" + execBlock.toCode()+ "\n";'
    - '	execBlock = execBlock.nextTranslatorBlock();'
    - '}'
    - 'return exec + "};\n";'


- name: me_bluetooth_command
  description: Makeblock Bluetooth Commands
  properties:
    bg.me_bluetooth_command: Bluetooth Command
    bg.me_bluetooth_command.description: return (0:module,1:device ID,2:mode,3:port,4:value)
  parameter:
  - {type: number, label: bc.me_port_number, default: [me_port_3, 'Port 3']}
  - {type: poly, label: bc.me_param_name,    default: [char, Speed]}
  return: {type: number}
  translator:
    name: MeBluetoothCommand
    headers: ['MeMCore.h' ]
    definitions: ['"MeBluetooth bluetooth" + arg1 + "(PORT_" + arg1 + ");"']
    setup: ['"bluetooth" + arg1 + ".begin(9600);"']
    code:
    - 'return "bluetooth" + arg1 + ".getParamValue(\"" + arg2.replace("\"", "") + "\")";'


##########################################################################
#  Common Properties
##########################################################################

Properties:

  bc.me_acceleration_number: Acceleration
  bc.me_buzzer_freq: Frequ
  bc.me_buzzer_time: Time
  bc.me_input_data: Data
  bc.me_led_num: Led
  bc.me_led_red: Red
  bc.me_led_green: Green
  bc.me_led_blue: Blue
  bc.me_motor_number: Motor
  bc.me_moveTo_number: Move
  bc.me_output_data: Data
  bc.me_param_name: Param
  bc.me_port_number: Port
  bc.me_shutter_state: State
  bc.me_speed_number: Speed
  bc.me_stepper_finish: Command
  bc.then: Then


##########################################################################
#  Families
##########################################################################

Families:

- *MAKEBLOCK_PORT
- *MAKEBLOCK_MOTOR
- *MAKEBLOCK_MOVE
- *MAKEBLOCK_SHUTTER
- *MAKEBLOCK_IRCONTROL
