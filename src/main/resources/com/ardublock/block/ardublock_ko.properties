#X-Generator: crowdin.com
bc.start=\uc2dc\uc791
bg.repeat_control=\ub458\uc0ac\uc774\ubc18\ubcf5
bg.repeat_control.description=\uc2dc\uc791\uac12\uacfc \uc815\ube44\uac12 \uc0ac\uc774\uc5d0 \uc788\ub294 "\ubcc0\uc218" \uc5d0 \ub300\ud55c \uba85\ub839\uc744 \ubc18\ubcf5\ud55c\ub2e4.
bc.end=\uc815\uc9c0
bc.increment=\ub2e8\uacc4
bg.constrain=\uc81c\ud55c
bc.low=\ubcf4\ub2e4\ub0ae\uc740
bc.high=\ubcf4\ub2e4\ub192\uc740
bg.sd_write2=SD \uc5d0 \uae30\ub85d
bg.sd_write=SD \ud50c\ub798\uc2dc\uc4f0\uae30
bg.sd_write_number_int=SD write number Int
bg.sd_return=\ub3cc\uc544\uc634
bg.sd_no_return=\ub3cc\uc544\uc624\uc9c0 \uc54a\uc74c
bg.eeprom_read=EEPROM \uc73c\ub85c\ubd80\ud130\uc77d\uc5b4\uc634
bg.eeprom_write=EEPROM\uc5d0\uae30\ub85d
bg.eeprom_read_int=EEPROM\uc73c\ub85c\ubd80\ud130\uc22b\uc790\uc77d\uc5b4\uc634
bg.eeprom_write_int=EEPROM \uc5d0\uc22b\uc790\uae30\ub85d
bd.storage=\uc800\uc7a5\uacf5\uac04
bc.device_address=\ub514\ubc14\uc774\uc2a4\uc8fc\uc18c
bc.device_address_I2C=\uc8fc\uc18c 0x
bc.register_address=\uc8fc\uc18c\ub4f1\ub85d
bc.watchdog_enable=\uac00\ub2a5
bc.eeprom_address=\uc8fc\uc18c
bc.eeprom_data=\ub370\uc774\ud130
bc.ln=\uc0c8\ub85c\uc6b4 \ub77c\uc778
bc.message=\uba54\uc2dc\uc9c02
bc.print=\uc778\uc1c4
bc.line_number=\ub77c\uc778\#
bc.character_number=char\#


bg.char=A
bd.chars=\ubb38\uc790 \ud14c\uc2a4\ud2b8
bg.not_equal_poly=\!\=
bg.glue_poly=glue
bg.serial_available=\uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc9c1\ub82c \ub370\uc774\ud130
bg.program=\ud504\ub85c\uadf8\ub7a8
bc.setup=\uc14b\uc5c5
bc.par=\uc785\ub825
bc.vecsize=\ud06c\uae30
bc.num=\#
bg.variable_vector=array variable name
bc.position=\uc704\uce58
bg.create_variable_vector=create an array
bg.setter_variable_vector=set an array member

bg.code_head=head
bg.code_setup=setup
bg.code_loop=\uc21c\ud658
bg.serial_read=\uc9c1\ub82c\ud3ec\ud2b8\uc77d\uae30
bd.especial=\ucf54\ub4dc\ube14\ub7ed
bg.not_equal_digital=\!\=
bg.repeat=repeat and count
bc.var=iteration variable name
bg.glue_msg=glue message

# BlockDrawer name
bc.angle=\uac01\ub3c4
bc.base=\uae30\ucd08
bc.condition=test
bc.else=\ub2e4\ub978
bc.exponent=\uc9c0\uc218
bc.from=~\ubd80\ud130
bc.level=\uc218\uc900
bc.max=\ucd5c\ub300
bc.min=min
bc.microseconds=\ub9c8\uc774\ud06c\ub85c\ucd08
bc.milliseconds=\ubc00\ub9ac\ucd08

# BlockConnector label
bc.pin_number=\ud540 \ubc88\ud638
bc.status=\uc0c1\ud0dc
bc.test=\uc2dc\ud5d8
bc.then=\uadf8 \ub2e4\uc74c
bc.to=~\uc5d0\uc11c
bc.value=\uac12
bc.variable=\ubcc0\uc218
bc.frequency=frequency
bc.do=do
bc.motor_channel=motor channel
bc.motor_speed=motor speed


bd.control=\uc81c\uc5b4
bd.dfrobot=DFRobot
bd.number=Variables/Constants
bd.operators=Math Operators
bd.pins=\ud540
bd.seeedstudio=Seeed Studio Grove

bd.communication=Communication

#linksprite
bd.linksprite_LinkerKit=Linker Kit

bd.tinkerkit=TinkerKit
bd.utilities=Generic Hardware
# BlockGenus initlabel
bg.df_lcd_keypad=LCD Keypad
bg.abs=abs
bg.addition=+
bg.and=\uadf8\ub9ac\uace0
bg.cos=cos


bg.delay=delay MILLIS
bg.delay_microseconds=delay MICROS



bg.digital-high=\ub192\uc74c
bg.digital-low=\ub0ae\uc74c
bg.digital-off=\ub044\uae30
bg.digital-on=\ucf1c\uae30
bg.division=\u00f7
bg.false=\uac70\uc9d3
bg.glue_sb=glue
bg.glue_sn=glue
bg.dummy=dummy
bg.greater=>
bg.greater_equal=>\=
bg.if=\ub9cc\uc57d
bg.ifelse=\ub9cc\uc57d/\uc544\ub2d8
bg.less=<
bg.less_equal=<\=
bg.loop=\ubc18\ubcf5
bg.subroutine=subroutine
bg.subroutine-ref=subroutine
bg.map=\ub9f5
bg.max=\ucd5c\ub300
bg.message=\uba54\uc2dc\uc9c0
bg.millis=\ubc00\ub9ac
bg.min=\ucd5c\uc800
bg.modulo=%
bg.multiplication=x
bg.not=not
bg.not_equal=\!\=
bg.number=1
bg.number_long=1000000
bg.number_double=3.1415927
bg.number-single=1
bg.number-single-I2C-address=3F
bg.number-single-fixed-parallel=Parallel
bg.or=\ub610\ub294
bg.pin-read-analog=\uc544\ub0a0\ub85c\uadf8 \ud540
bg.pin-read-digital=\ub514\uc9c0\ud138 \ud540
bg.pin-read-digital-pullup=\uc785\ub825\ud480\uc5c5
bg.pin-write-analog=\uc544\ub0a0\ub85c\uadf8 pin \uc124\uc815
bg.pin-write-digital=\ub514\uc9c0\ud138 \ud540 \uc124\uc815
bg.pow=\uc804\uc6d0
bg.random=\ubb34\uc791\uc704
bg.repeat_times=\ubc18\ubcf5
bg.seeed_joystick=\uadf8\ub85c\ube0c \uc5c4\uc9c0\uc190\uac00\ub77d \uc870\uc774\uc2a4\ud2f1
bg.seeed_joystick_button=\uadf8\ub85c\ube0c \uc5c4\uc9c0\uc190\uac00\ub77d \uc870\uc774\uc2a4\ud2f1 \ubc84\ud2bc
bg.watchdog_15ms=WDTO_15MS
bg.watchdog_30ms=WDTO_30MS
bg.watchdog_60ms=WDTO_60MS
bg.watchdog_120ms=WDTO_120MS
bg.watchdog_250ms=WDTO_250MS
bg.watchdog_500ms=WDTO_500MS
bg.watchdog_1s=WDTO_1S
bg.watchdog_2s=WDTO_2S
bg.watchdog_4s=WDTO_4S
bg.watchdog_8s=WDTO_8S
bg.watchdog_setup=\uc6cc\uce58\ub3c5
bg.watchdog_reset=\uc6cc\uce58\ub3c5\ub9ac\uc14b
bg.random_range=\ub79c\ub364


#linksprite

bg.serial_println=serial println
bg.serial_print=serial print
bg.servo=\uc11c\ubcf4
bg.servo_prefix=Servo\: 
bg.servo_default=\ucd5c\uae30\uac12
bg.servo_sg90=SG90
bg.servo_mg996r=MG996R
bg.setter_variable_digital=\ub514\uc9c0\ud138 \ubcc0\uc218 \uc124\uc815
bg.setter_variable_number=\uc815\uc218 \ubcc0\uc18c \uc124\uc815
bg.setter_variable_number_unsigned_long=\ud070\uc815\uc218 \ubcc0\uc218 \uc124\uc815
bg.setter_variable_number_double=\uc2ed\uc9c4\uc218 \ubcc0\uc218 \uc124\uc815
bg.sin=\uc0ac\uc778
bg.sqrt=\uc81c\uacf1\uadfc
bg.subtraction=-
bg.tan=\ud0c4\uc820\ud2b8
bg.true=\uc0ac\uc2e4

bg.ultrasonic=\ucd08\uc74c\ud30c
bg.LCD_I2C_Sainsmart_20by4=20by4 I2C  Sainsmart
bg.LCD_I2C_Sainsmart_16by2=16by2 I2C  Sainsmart
bg.LCD_PLL_Sainsmart_16by2=16by2 PLL Sainsmart
bg.LCD_command_clear=\ud074\ub9ac\uc5b4
bg.LCD_command_home=\ud648
bg.LCD_command_lightOn=\ub77c\uc774\ud2b8\ucf2c
bg.LCD_command_lightOff=\ub77c\uc774\ud2b8\ub054
bg.LCD_command_cursorOn=\ucee4\uc11c\ucf2c
bg.LCD_command_cursorOff=\ucee4\uc11c\ub054
bg.LCD_command_blinkOn=\uae5c\ube61\uc784\ucf2c
bg.LCD_command_blinkOff=\uae5c\ube61\uc784\ub054
bg.variable_digital=digital variable name
bg.variable_number=integer variable name
bg.variable_number_unsigned_long=Large integer variable name
bg.variable_number_double='Decimal' variable name
bg.while=\ubc18\ubcf5_While
bg.do_while=do while
bg.wire_isread=read I2C ok?
bg.wire_read=read from I2C
bg.wire_write=write to I2C
bg.wire_write_one_byte=I2C write 1
bg.tone=\ud1a4
bg.tone_time=tone
bg.no_tone=\ud1a4\uc5c6\uc74c
bg.xcj_motor_backward=motor shield backward
bg.xcj_motor_forward=\uc804\ubc29\ubaa8\ud130 \ucc28\ud3d0
bg.xcj_ms_digital_read=Xinchejian digitalRead
bg.xcj_ms_digital_write=Xinchejian digitalWrite

bd.logic=\ud14c\uc2a4\ud2b8



ardublock.file.suffix=Ardublock Program File(*.abp)
ardublock.ui.new=New
ardublock.ui.save=\uc800\uc7a5
ardublock.ui.saveAs=\ub2e4\ub978 \uc774\ub984\uc73c\ub85c \uc800\uc7a5
ardublock.ui.load=\uc5f4\uae30
ardublock.ui.upload=\uc544\ub450\ub2c8\uc624\uc5d0 \uc5c5\ub85c\ub4dc
ardublock.ui.clone=\ud074\ub860
ardublock.ui.add_comment=\ucf54\uba58\ud2b8 \ucd94\uac00
ardublock.ui.delete_comment=\ucf54\uba58\ud2b8 \uc0ad\uc81c
ardublock.ui.organize_blocks=\ubaa8\ub4e0 \ubd88\ub7ed\uc744 \uad6c\uc131
ardublock.ui.create_refer=\ucc38\uc870 \ub9cc\ub4e4\uae30
ardublock.ui.website=\uc6f9\uc0ac\uc774\ud2b8\ub85c \uac00\uae30
ardublock.ui.serialMonitor=\uc2dc\ub9ac\uc5bc \ubaa8\ub2c8\ud130
ardublock.ui.saveImage=\ub2e4\ub978\uc774\ub984\uc73c\ub85c \uc774\ubbf8\uc9c0 \uc800\uc7a5

ardublock.error_msg.digital_var_slot=\ub514\uc9c0\ud138\ubcc0\uc218 \uc2ac\ub86f\uc740 '\ub514\uc9c0\ud138\ubcc0\uc218' \uc774\ub984\uc744 \ucde8\ud574\uc57c\ub9cc \ud55c\ub2e4.\n\ud78c\ud2b8\: \uac15\uc870 \ud45c\uc2dc\ub41c \ubd88\ub7ed\uc5d0 '\ubcc0\uc218'\uc18c\ucf13\uc744 \ubcf4\uc2dc\uc624.
ardublock.error_msg.number_var_slot=\ud45c\uc900\ubcc0\uc218 \uc2ac\ub86f\uc740 \ubc18\ub4dc\uc2dc '\uc815\uc218' \ubcc0\uc218\uba85\uc744 \ucde8\ud574\uc57c\ud55c\ub2e4. \n\ud78c\ud2b8\: \uac15\uc870\ud45c\uc2dc\ub41c \ube14\ub7ed\uc5d0 '\ubcc0\uc218' \uc18c\ucf13\uc744 \ud655\uc778\ud558\uc2dc\uc624.
ardublock.error_msg.long_number_var_slot=Large integer variable slot must take a 'Large Integer' variable name.\nHint\: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.double_number_var_slot=variable slot must take a 'Decimal' variable name.\nHint\: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.char_var_slot=Char variable slot must take a char variable name.\nHint\: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_var_slot='Array variable' slot must take an 'array variable' name.\nHint\: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_size_slot='Array size' slot must take a standard integer constant

ardublock.translator.exception.subroutineNameDuplicated=two or more subroutines have the same name\!
ardublock.translator.exception.noLoopFound=No loop found\!
ardublock.translator.exception.multipleLoopFound=multiple loop block found\!
ardublock.translator.exception.socketNull=A required Value, Variable Name or 'Test' is missing.\nHint\:\: Look for an empty 'socket' in the highlighted block.
ardublock.translator.exception.subroutineNotDeclared=subroutine not declared

message.title.error=\uc624\ub958
message.title.question=\uc9c8\ubb38
message.content.open_unsaved=\uc544\ub450\ube14\ub7ed \ud504\ub85c\uadf8\ub7a8\uc774 \ubcc0\uacbd\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc800\uc7a5\ud560\uae4c\uc694?
message.content.overwrite=\uae30\uc874\ud30c\uc77c\uc5d0 \ub36e\uc5b4\uc4f8\uae4c\uc694?
message.file_not_found=\ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uac70\ub098, \uc0ac\uc6a9\uad8c\ud55c\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.
message.question.newfile_on_workspace_changed=\ud504\ub85c\uadf8\ub7a8\uc774 \ubcc0\uacbd\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \uc544\ub450\ube14\ub7ed\ud30c\uc77c\uc744 \uc0dd\uc131\ud560\uae4c\uc694?

bc.repeat_times=\uc2dc\uac04

# Descriptions of all Block

bg.program.description=\ub8e8\ud504\uc640 \uc14b\uc5c5\uc744 \uac00\uc9c4 \uc8fc \ud504\ub85c\uadf8\ub7a8
bg.loop.description=Main Program loop without setup


bg.delay.description=Delay for "milliseconds" indicated.\nNOTE\: 1000 millis \= 1 second
bg.if.description=Execute the commands if the "test" is true
bg.ifelse.description=Execute the first set of commands if the "test" is true, otherwise it will do the second set of commands.
bg.while.description=Execute the commands as long as the "test" is true
bg.do_while.description=Execute the list of commands. Then, if 'test' is true, keep on repeating it until 'test' is 'false'
bg.repeat_times.description=Repeat the commands. Stop after "times" repetitions.
bg.subroutine.description=Add a subroutine
bg.subroutine-ref.description=Invoke subroutine
bg.delay_microseconds.description=Delay for "microseconds" indicated. \nNOTE\: 1000000 micros \= 1 second
bg.pin-read-analog.description=Read analog value from pin
bg.pin-read-digital.description=Read digital value from pin
bg.pin-read-digital-pullup.description=set digital pin with internal pullup
bg.pin-write-digital.description=write digital to pin
bg.pin-write-analog.description=write analog to pin
bg.addition.description=Sum of two numbers
bg.subtraction.description=Difference of two numbers
bg.multiplication.description=Product of two numbers
bg.division.description=Quotient of two numbers
bg.random.description=Generate a random number less than the number
bg.map_common.description=map value from [0, 1023] to [0, 255]
bg.map.description=Map value from "from" range to "to" range
bg.constrain.description=Constrain a number between two values
bg.greater.description=True if the first number is greater the second number
bg.less.description=True if the first number is less then the second number
bg.equal.description=True if the first number equals to the scond number
bg.equal_digital.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uc73c\uba74 \uc9c4\uc2e4
bg.greater_equal.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uac70\ub098 \ud06c\uba74 \uc9c4\uc2e4
bg.less_equal.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uac70\ub098 \uc791\uc73c\uba74 \uc9c4\uc2e4
bg.not_equal.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc9c4\uc2e4
bg.not_equal_digital.description=\uccab\ubc88\uc9f8 \uc22b\uc790\uac00 \ub450\ubc88\uc9f8 \uc22b\uc790\uc640 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc9c4\uc2e4
bg.and.description=\ub450\uac1c\uc758 \uc870\uac74\uc774 \ubaa8\ub450 \uc9c4\uc2e4\uc774\uba74 \uc9c4\uc2e4
bg.or.description=\ud558\ub098 \ub610\ub294 \ub450\uac1c \ubaa8\ub450\uc758 \uc870\uac74\uc774 \uc9c4\uc2e4\uc774\uba74 \uc9c4\uc2e4
bg.not.description=\ubc18\ub300
bg.equal_poly.description=\uccab\ubc88\uc9f8 \ubb38\uc790\uac00 \ub450\ubc88\uc9f8 \ubb38\uc790\uc640 \uac19\uc73c\uba74 \uc9c4\uc2e4
bg.not_equal_poly.description=\uccab\ubc88\uc9f8 \ubb38\uc790\uac00 \ub450\ubc88\uc9f8 \ubb38\uc790\uc640 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc9c4\uc2e4
bg.millis.description=\ub9c8\uc9c0\ub9c9 \ud30c\uc6cc-\uc5c5 \ub610\ub294 \ub9ac\uc14b\uc774\ud6c4 \ubc00\ub9ac\ucd08.\n\ucc38\uace0\: '\ud070\uc815\uc218' \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc2dc\uc624.
bg.true.description=\ubd80\uc6b8 \uc9c4\uc2e4
bg.false.description=\ubd80\uc6b8 \uac70\uc9d3
bg.digital-high.description=\ud540 \ud558\uc774
bg.digital-low.description=\ud540 \ub85c
bg.char.description=\ubb38\uc790 \uc0c1\uc218
bg.number.description=Standard integer constant. 32,768 to +32,767
bg.number_long.description=Large integer constant. 0 to 4,294,967,295
bg.number_double.description='Decimal' number constant. +/- 3.4028235E+38
bg.variable_number.description=Standard integer variable. -32,768 to +32,767
bg.variable_number_unsigned_long.description=Large integer variable name
bg.variable_number_double.description='Decimal' variable name
bg.variable_digital.description=Digital variable
bg.setter_variable_number.description=Set standard integer variable. -32,768 to +32,767
bg.setter_variable_number_unsigned_long.description=Set large integer variable. 0 to 4,294,967,295
bg.setter_variable_number_double.description=Set 'Decimal' variable. +/- 3.4028235E+38
bg.setter_variable_digital.description=Set digital variable
bg.variable_vector.description=Get the value of an array member
bg.create_variable_vector.description=Create an array of standard integers. -32,768 to +32,767
bg.setter_variable_vector.description=Set the value of an array member
bg.setter_variable_char.description=Set a character variable
bg.variable_poly.description=Character variable name
bg.servo.description=Control a servo
bg.servo_sg90.description=Control an SG90 servo
bg.servo_mg996r.description=Control an MG996R servo
bg.servo_default.description=Control a servo
bg.ultrasonic.description=Ultrasonic distance sensor
bg.LCD_I2C_Sainsmart_20by4.description=Sainsmart LCD Display. I2C. 20 Char by 4 Lines
bg.LCD_I2C_Sainsmart_16by2.description=Sainsmart LCD Display. I2C. 16 Char by 2 Lines
bg.LCD_PLL_Sainsmart_16by2.description=Sainsmart LCD Display. Parallel. 16 Char by 2 Lines
bg.LCD_command_clear.description=Clear an LCD display
bg.LCD_command_home.description=LCD display home
bg.LCD_command_lightOn.description=LCD display light on.
bg.LCD_command_lightOff.description=LCD display light off
bg.LCD_command_cursorOn.description=LCD display cursor on.
bg.LCD_command_cursorOff.description=LCD display cursor off
bg.LCD_command_blinkOn.description=LCD display blink on.
bg.LCD_command_blinkOff.description=LCD display blink off
bg.tone.description=Generates a square wave of the specified frequency (and 50%\tduty cycle) on a pin.
bg.tone_time.description=Generates a square wave of the specified frequency (and 50% duty cycle) on a pin.
bg.no_tone.description=Stops the generation of a square wave triggered by tone().
bg.serial_print.description=Send message via Serial port
bg.message.description=Text message
bg.glue_sn.description=Glue number to string
bg.glue_sb.description=Glue boolean to string
bg.glue_poly.description=Glue char to string
bg.wire_write.description=Write data via I2C
bg.wire_read.description=Read data from i2c
bg.wire_isread.description=Is last read from I2C success?
bg.eeprom_read.description=Read a byte (0-255) from EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_write.description=Write a byte (0-255) to EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_read_int.description=Read an int (+/- 32,767) from EEPROM. NOTE\: DON'T read from consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_write_int.description=Write an int (+/- 32,767) to EEPROM. NOTE\: DON'T write to consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_read_long.description=Read a 'long' (0 - 4,294,967,295) from EEPROM. NOTE\: DON'T read from consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.eeprom_write_long.description=Write a 'long' (0 - 4,294,967,295) to EEPROM. NOTE\: DON'T write to consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.sd_write2.description=Write to SD card
bg.code_loop.description=Add raw codes to loop()
bg.code_head.description=Add raw codes to head
bg.code_setup.description=Add raw codes to setup()
bg.glue_msg.description=Glue a text message
bg.variable_fake.description=Digital Var\t\t\t\t
bg.serial_println.description=Send message via Serial port with a return
bg.xcj_motor_forward.description=forward
bg.xcj_motor_backward.description=Moving the car backward
bg.xcj_ms_digital_write.description=Write digital signal to Socket
bg.xcj_ms_digital_read.description=Read digital status from socket
bg.df_lcd_keypad.description=lcd block that use liquicrystal
bg.seeed_joystick.description=Read analog value from analog pin
bg.seeed_joystick_button.description=Read analog value from analog pin








bg.random_range.description=Generate random number between min and (max - 1)






#workshop blocks 

#InsectBot blocks


##iDrawing blocks








#





#











#








#legacy support
bg.loop1=loop
bg.loop1.description=loop
bg.loop2=loop
bg.loop2.description=loop
bg.loop3=loop
bg.loop3.description=loop

# littlebits 


