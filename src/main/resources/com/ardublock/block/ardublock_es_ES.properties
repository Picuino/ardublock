#X-Generator: crowdin.com
bc.start=iniciar
bg.repeat_control=repetir entre
bg.repeat_control.description=Repite los comandos con la "variable" que oscila entre los valores "inicio-start-" y "parada -stop-". cambia "variable" incrementandola despu\u00e9s de cada repetici\u00f3n
bc.end=parada
bc.increment=pasos de
bg.constrain=limitar, restringir...
bc.low=menor
bc.high=mayor
bg.sd_write2=Escriba a SD
bg.sd_write=Escribe SD flash
bg.sd_write_number=Escribe n\u00famero SD
bg.sd_write_number_int=Escrine SD n\u00famero Ent.
bg.sd_return=Volver
bg.sd_no_return=No Volver
bg.eeprom_read=leer bytes de la EEPROM
bg.eeprom_write=escribir bytes en la EEPROM
bg.eeprom_read_int=leer n\u00famero de la EEPROM
bg.eeprom_write_int=Escribir un n\u00famero en la EEPROM
bg.eeprom_read_long=leer un 'largo' de la EEPROM
bg.eeprom_write_long=escribir un 'largo' en la EEPROM
bd.storage=Amacenar
bc.device_address=Direcci\u00f3n del dispositivo
bc.device_address_I2C=Direcci\u00f3n 0x
bc.register_address=Direcci\u00f3n de registro
bc.watchdog_enable=Activar
bc.eeprom_address=direcci\u00f3n
bc.eeprom_data=dato
bc.ln=nueva linea
bc.message=mensage2
bc.print=imprimir
bc.line_number=l\u00ednea \#
bc.character_number=Car\u00e1cter \#


bg.variable_poly=nombre variable char
bg.setter_variable_char=configurar variable caracter
bg.char=A
bd.chars=Test Caracteres
bg.not_equal_poly=\!\=
bg.glue_poly=unir
bg.serial_read_poly=leer serie
bg.serial_available=datos puerto serie disponibles
bg.program=programa
bc.setup=configuraci\u00f3n
bc.loop=bucle
bg.setup=configuraci\u00f3n
bc.par=entrada
bc.vecsize=tama\u00f1o
bc.num=\#
bg.variable_fake=falso
bg.fake=falso
bg.variable_vector=nombre variable array
bc.position=posici\u00f3n
bg.create_variable_vector=crear un array
bg.setter_variable_vector=establecer a un miembro tipo matriz

bg.code_head=cabecera
bg.code_setup=configuraci\u00f3n
bg.code_loop=bucle
bg.serial_read=leer serie
bd.especial=Bloques C\u00f3digo
bg.not_equal_digital=\!\=
bg.repeat=repetir y contar
bc.var=nombre variable iteracci\u00f3n
bg.glue_msg=mensaje a\u00f1adido

# BlockDrawer name
bc.angle=\u00e1ngulo
bc.base=base
bc.condition=prueba
bc.else=entones
bc.exponent=exponente
bc.from=de
bc.level=nivel
bc.max=Max
bc.min=min
bc.microseconds=microsegundos
bc.milliseconds=milisegundos

# BlockConnector label
bc.pin_number=pin\#
bc.status=estado
bc.test=condici\u00f3n
bc.then=entonces
bc.to=a
bc.value=valor
bc.variable=variable
bc.frequency=frecuencia
bc.do=hacer
bc.motor_channel=canal motor
bc.motor_speed=velocidad de motor


bd.control=Control
bd.dfrobot=DFRobot
bd.number=Datos
bd.operators=Matem\u00e1ticas
bd.pins=Pins

bd.communication=Comunicaci\u00f3n


bd.utilities=Hardware gen\u00e9rico

# BlockGenus initlabel
bg.abs=abs
bg.addition=+
bg.and=and
bg.cos=cos


bg.delay=retardo en msg.
bg.delay_microseconds=retardo de micro seg.



bg.digital-high=ALTO
bg.digital-low=BAJO
bg.digital-off=OFF
bg.digital-on=ON
bg.division=/
bg.false=FALSO
bg.glue_sb=glue
bg.glue_sn=glue
bg.dummy=vacio
bg.greater=>
bg.greater_equal=>\=
bg.if=si
bg.ifelse=si/entonces
bg.less=<
bg.less_equal=<\=
bg.loop=bucle
bg.subroutine=subrutina
bg.subroutine-ref=subrutina
bg.map=map
bg.max=Max
bg.message=mensaje
bg.variable_millis=milis
bg.min=Min
bg.modulo=%
bg.multiplication=x
bg.not=no
bg.not_equal=\!\=
bg.number=1
bg.number_long=1000000
bg.number_double=3.1415927
bg.number-single=1
bg.number-single-I2C-address=3F
bg.number-single-fixed-parallel=Paralelo
bg.or=or
bg.pin-read-analog=pin anal\u00f3gico
bg.pin-read-digital=pin digital 
bg.pin-read-digital-pullup=Entrada pullup
bg.pin-write-analog=configura pin anal\u00f3gico
bg.pin-write-digital=configura pin digital
bg.pow=potencia
bg.random=aleatorio
bg.repeat_times=repite
bg.watchdog_15ms=WDTO_15MS
bg.watchdog_30ms=WDTO_30MS
bg.watchdog_60ms=WDTO_60MS
bg.watchdog_120ms=WDTO_120MS
bg.watchdog_250ms=WDTO_250MS
bg.watchdog_500ms=WDTO_500MS
bg.watchdog_1s=WDTO_1S
bg.watchdog_2s=WDTO_2S
bg.watchdog_4s=WDTO_4S
bg.watchdog_8s=WDTO_8S
bg.watchdog_setup=Protecci\u00f3n
bg.watchdog_reset=Reset Protecci\u00f3n
bg.random_range=aleatorio


bg.serial_println=impresion serial
bg.serial_print=impresi\u00f3n serie
bg.servo=Servo
bg.servo_prefix=Servo\: 
bg.servo_default=Por defecto
bg.servo_sg90=SG90
bg.servo_mg996r=MG996R
bg.setter_variable_digital=configura variable digital
bg.setter_variable_number=configura variable integer
bg.setter_variable_number_unsigned_long=configura variable tipo entero grande
bg.setter_variable_number_double=configura variable de n\u00famero decimal
bg.sin=sen
bg.sqrt=raiz cuadrada
bg.subtraction=-
bg.tan=tan
bg.true=CIERTO

bg.ultrasonic=ultrasonico
bg.LCD_I2C_Sainsmart_20by4=20by4 I2C Sainsmart
bg.LCD_I2C_Sainsmart_16by2=16by2 I2C Sainsmart
bg.LCD_PLL_Sainsmart_16by2=16by2 PLL Sainsmart
bg.LCD_command_clear=BORRAR
bg.LCD_command_home=INICIO
bg.LCD_command_lightOn=Luz ON
bg.LCD_command_lightOff=Luz OFF
bg.LCD_command_cursorOn=Cursor on
bg.LCD_command_cursorOff=Cursor off
bg.LCD_command_blinkOn=Blink On
bg.LCD_command_blinkOff=Blink Off
bg.variable_digital=nombre variable digital
bg.variable_number=nombre de la variable Integer
bg.variable_number_unsigned_long=Nombre de variable tipo entero grande
bg.variable_number_double=Nombre de la variable 'Decimal'
bg.while=mientras que
bg.do_while=mientras que
bg.wire_isread=lectura l2c bi\u00e9n?
bg.wire_read=leer desde l2C
bg.wire_write=escribir en l2C
bg.wire_write_one_byte=Escribe 1 en I2C
bg.tone=tono
bg.tone_time=tono
bg.no_tone=No hay tono
bg.xcj_motor_backward=Motor hacia atr\u00e1s
bg.xcj_motor_forward=Motor hacia adelante
bg.xcj_ms_digital_read=Xinchejian digitalLeer
bg.xcj_ms_digital_write=Xinchejian digitalEscribir

bd.logic=Pruebas

ardublock.file.suffix=Fichero de Ardublock(*.abp)
ardublock.ui.new=Nuevo
ardublock.ui.save=Guardar
ardublock.ui.saveAs=Grabar Como
ardublock.ui.load=Abrir
ardublock.ui.upload=Cargar a Arduino
ardublock.ui.clone=Clonar
ardublock.ui.add_comment=A\u00f1adir comentario
ardublock.ui.delete_comment=Eliminar comentario
ardublock.ui.organize_blocks=Organizar todos los bloques
ardublock.ui.create_refer=crear referencia
ardublock.ui.website=Ir al Sitio Web
ardublock.ui.serialMonitor=Monitor Puerto Serie
ardublock.ui.saveImage=Guardar imagen como...

ardublock.error_msg.digital_var_slot=La variable digital debe tener un nombre 'variable digital'. Consejo\: Mira el lugar 'variable' en el bloque de resaltado
ardublock.error_msg.number_var_slot=Variable est\u00e1ndar debe tener un nombre de variable 'Entero'. Consejo\: Mira el lugar 'variable' en el bloque de resaltado
ardublock.error_msg.long_number_var_slot=Variable entero grande debe tener un nombre de variable 'Entero grande'. Consejo\: Mira el lugar 'variable' en el bloque de resaltado
ardublock.error_msg.double_number_var_slot=Variable debe tener un nombre de variable 'Decimal'. Consejo\: Mira el lugar 'variable' en el bloque de resaltado
ardublock.error_msg.char_var_slot=Variable char debe tomar un caracter como nombre de variable. Consejo\: Mira el lugar 'variable' en el bloque de resaltado
ardublock.error_msg.array_var_slot='Variable Array' debe tener un nombre 'variable array'. Consejo\: Mira el lugar 'variable' en el bloque de resaltado
ardublock.error_msg.array_size_slot=\ 'Tama\u00f1o de la matriz' debe tener un valor entero constante

ardublock.translator.exception.subroutineNameDuplicated=\u00a1Dos o m\u00e1s subrutinas tienen el mismo nombre\!
ardublock.translator.exception.noLoopFound=Ning\u00fan lazo encontrado\!
ardublock.translator.exception.multipleLoopFound=encontrado bloque con multiples bucles\!
ardublock.translator.exception.socketNull=Falta un valor requerido, nombre de la Variable o 'Test'. Sugerencia\:\: Busque un lugar vac\u00edo en el bloque de resaltado.
ardublock.translator.exception.subroutineNotDeclared=subrutina no declarado

message.title.error=Error
message.title.question=Pregunta
message.content.open_unsaved=El programa Ardublock ha cambiado, \u00bfdesea guardarlo?
message.content.overwrite=\u00bfDesea sobreescribir el fichero existente?
message.file_not_found=Archivo no encontrado o Permiso denegado
message.question.newfile_on_workspace_changed=El programa ha cambiado, \u00bfquieres crear un nuevo archivo Ardublock?

bc.repeat_times=tiempos

# Descriptions of all Block

bg.program.description=Programa principal con bucle y configuraci\u00f3n
bg.loop.description=Loop de programa principal  sin configuraci\u00f3n


bg.delay.description=Retraso indicado en "milisegundos". Nota\: 1000 millis \= 1 segundo
bg.if.description=Ejecuta los comandos si se se cumple la "condici\u00f3n"
bg.ifelse.description=Ejecuta el primer bloque de comandos si la condici\u00f3n se cumple, de lo contrario ejecutar\u00e1 el segundo bloque de comandos.
bg.while.description=Ejecuta los comandos mientras se cumple la "condicion"
bg.do_while.description=Ejecuta la lista de comandos. Entonces, si la 'condici\u00f3n' se cumple, se sigue repitiendo hasta que la 'condici\u00f3n' no se cumple
bg.repeat_times.description=Repite los comandos. Parar despu\u00e9s de "n" repeticiones.
bg.subroutine.description=A\u00f1ade una subrutina
bg.subroutine-ref.description=Invoca subrutina
bg.delay_microseconds.description=Retrasa los "microsegundos" indicados.  Nota\: 1000000 micros \= 1 segundo
bg.pin-read-analog.description=Lee el valor anal\u00f3gico de un pin
bg.pin-read-digital.description=Lee el valor digital de un pin
bg.pin-read-digital-pullup.description=configura un pin digital con resistencia interna pullup
bg.pin-write-digital.description=escribe en un pin digital
bg.pin-write-analog.description=escribe en un pin anal\u00f3gico
bg.addition.description=Suma de dos numeros
bg.subtraction.description=Resta dos n\u00fameros
bg.multiplication.description=Multiplica dos n\u00fameros
bg.division.description=Divide dos n\u00fameros
bg.random.description=Generar un n\u00famero aleatorio menor que el n\u00famero
bg.map_common.description=mapa de valores de [0,1023] a [0,255]
bg.map.description=Mapa de valores desde la escala  "from" a "to"
bg.constrain.description=Restringir un n\u00famero entre dos valores
bg.greater.description=Verdadero si el primer n\u00famero es mayor que el segundo n\u00famero
bg.less.description=Verdadero si el primer n\u00famero es menor que el segundo n\u00famero
bg.equal.description=Verdadero si el primer n\u00famero es igual al segundo n\u00famero
bg.equal_digital.description=Verdadero si el primer n\u00famero es igual al segundo n\u00famero
bg.greater_equal.description=Verdadero si el primer n\u00famero es mayor o igual que el segundo n\u00famero
bg.less_equal.description=Verdadero si el primer n\u00famero es menor o igual que el segundo n\u00famero
bg.not_equal.description=Verdadero si el primer n\u00famero no es igual al segundo n\u00famero
bg.not_equal_digital.description=Verdadero si el primer n\u00famero no es igual al segundo n\u00famero
bg.and.description=Verdadero si cualquiera de las dos condiciones son verdaderas.
bg.or.description=Verdadero si una o ambas de las dos condiciones son verdaderas.
bg.not.description=Lo opuesto de 
bg.equal_poly.description=Verdadero si el primer car\u00e1cter es igual al segundo car\u00e1cter
bg.not_equal_poly.description=Verdadero si el primer car\u00e1cter no es igual al segundo car\u00e1cter
bg.variable_millis.description=milisegundos desde la \u00faltima puesta en marcha o reset. Nota\: Utilizar una variable de tipo 'Entero grande'.
bg.true.description=Cierto Booleano.
bg.false.description=Falso Booleano.
bg.digital-high.description=Pin Alto
bg.digital-low.description=Pin Bajo
bg.char.description=Constante de caracteres
bg.number.description=Constante entera est\u00e1ndar. 32.768 a +32,767
bg.number_long.description=Constante entera grande. 0 a 4,294,967,295
bg.number_double.description='Decimal' n\u00famero constante. + 3.4028235E + 38-
bg.variable_number.description=Variable de tipo entero est\u00e1ndar. -32,768 a +32,767
bg.variable_number_unsigned_long.description=Nombre de variable tipo entero grande
bg.variable_number_double.description=Nombre de la variable 'Decimal'
bg.variable_digital.description=Variable Digital
bg.setter_variable_number.description=Variable de tipo entero est\u00e1ndar. -32,768 a +32,767
bg.setter_variable_number_unsigned_long.description=Configura variable de tipo "entero grande". 0 a 4,294,967,295
bg.setter_variable_number_double.description=Define variable 'Decimal'. + 3.4028235E + 38-
bg.setter_variable_digital.description=Configura variable digital
bg.variable_vector.description=Obtiene el valor de un miembro de la matriz
bg.create_variable_vector.description=Crear una matriz de enteros est\u00e1ndar. -32,768 a +32,767
bg.setter_variable_vector.description=Obtiene el valor de un miembro de la matriz
bg.setter_variable_char.description=Definir una variable de car\u00e1cter
bg.variable_poly.description=Nombre de la variable de car\u00e1cter
bg.servo.description=Control de servo
bg.servo_sg90.description=Controlar un servo SG90
bg.servo_mg996r.description=Controlar un servo MG996R
bg.servo_default.description=Control de servo
bg.ultrasonic.description=Sensor de distancia ultras\u00f3nico
bg.LCD_I2C_Sainsmart_20by4.description=Sainsmart pantalla LCD. I2C. 20 char por 4 l\u00edneas
bg.LCD_I2C_Sainsmart_16by2.description=Sainsmart pantalla LCD. I2C. 20 char por 4 l\u00edneas
bg.LCD_PLL_Sainsmart_16by2.description=Sainsmart pantalla LCD. Paralelo. 16 char por 2 l\u00edneas
bg.LCD_command_clear.description=Limpiar una pantalla LCD
bg.LCD_command_home.description=Pantalla de inicio
bg.LCD_command_lightOn.description=Display LCD "On".
bg.LCD_command_lightOff.description=Display LCD "Off"
bg.LCD_command_cursorOn.description=Cursor de la pantalla LCD "On".
bg.LCD_command_cursorOff.description=Cursor de la pantalla LCD "Off"
bg.LCD_command_blinkOn.description=Parpadeo de pantalla LCD "on"
bg.LCD_command_blinkOff.description=Parpadeo de pantalla LCD "off"
bg.tone.description=Genera en un pin una onda cuadrada de la frecuencia especificada (ciclo de trabajo del 50%).
bg.tone_time.description=Genera en un pin una onda cuadrada de la frecuencia especificada (ciclo de trabajo del 50%).
bg.no_tone.description=Detener la generaci\u00f3n de una onda cuadrada provocada por un tono ().
bg.serial_print.description=Enviar mensaje a trav\u00e9s del puerto serie
bg.message.description=Mensaje de Texto
bg.glue_sn.description=pegar n\u00famero a un string
bg.glue_sb.description=pegar boolean a un string
bg.glue_poly.description=Pegar un mensaje de texto
bg.wire_write.description=Escribe dato via I2C
bg.wire_read.description=Lee dato de I2C
bg.wire_isread.description=\u00bfSe realiz\u00f3 con \u00e9xito la \u00faltima lectura I2C?
bg.eeprom_read.description=Leer un byte (0-255) de EEPROM. Cada byte consume s\u00f3lo una direcci\u00f3n EEPROM. Utilizando direcciones consecutivas est\u00e1 bien
bg.eeprom_write.description=Escribir un byte (0-255) de EEPROM. Cada byte consume s\u00f3lo una direcci\u00f3n EEPROM. Utilizando direcciones consecutivas est\u00e1 bien
bg.eeprom_read_int.description=Leer un int (+ /-32.767) de EEPROM. Nota\: No leer desde direcciones consecutivas. Cada n\u00famero consume 2 direcciones en EEPROM
bg.eeprom_write_int.description=Escribir un int (+ /-32.767) EEPROM. Nota\: No escriba a direcciones consecutivas. Cada n\u00famero consume 2 direcciones en EEPROM
bg.eeprom_read_long.description=Leer dato tipo 'largo' (0 - 4,294,967,295) de EEPROM. Nota\: No leer desde direcciones consecutivas. Cada n\u00famero consume 4 direcciones en EEPROM
bg.eeprom_write_long.description=Escribir un dato tipo 'largo' (0 - 4,294,967,295) de EEPROM. Nota\: No escriba a direcciones consecutivas. Cada n\u00famero consume 4 direcciones en EEPROM
bg.sd_write2.description=Escribir en tarjeta SD
bg.code_loop.description=A\u00f1adir c\u00f3digo al bloque loop ()
bg.code_head.description=A\u00f1adir c\u00f3digo a la cabecera
bg.code_setup.description=A\u00f1adir c\u00f3digo a la parte setup
bg.glue_msg.description=Pegar un mensaje de texto
bg.variable_fake.description=Var Digital
bg.serial_println.description=Env\u00eda mensaje via Puerto Serie con retorno
bg.xcj_motor_forward.description=adelante
bg.xcj_motor_backward.description=Mover el coche hacia atr\u00e1s
bg.xcj_ms_digital_write.description=Escribe se\u00f1al digital en un Terminal
bg.xcj_ms_digital_read.description=Leer estado Digital de un terminal

bg.random_range.description=Generar un numero aleatorio entre min y (max -1)


#legacy support
bg.loop1=bucle
bg.loop1.description=bucle
bg.loop2=bucle
bg.loop2.description=bucle
bg.loop3=bucle
bg.loop3.description=bucle

