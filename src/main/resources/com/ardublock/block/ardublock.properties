bc.start=start
bg.repeat_control=repeat between
bg.repeat_control.description=Repeat the commands with "variable" ranging between "start" and "stop" values. "variable" changes by "increment" after each repetition
bc.end=stop
bc.increment=steps of
bg.constrain=constrain
bc.low=lower
bc.high=higher
bg.sd_write2=write to SD
bg.sd_write=SD flash write
bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=read 'byte' EEPROM
bg.eeprom_write=write 'byte' EEPROM
bg.eeprom_read_int=read number from EEPROM
bg.eeprom_write_int=write number to EEPROM
bg.eeprom_read_long=read 'long' from EEPROM
bg.eeprom_write_long=write 'long' to EEPROM
bd.storage=Storage
bc.device_address=device address
bc.device_address_I2C=address 0x
bc.register_address=register address
bc.watchdog_enable=enable
bc.eeprom_address=address
bc.eeprom_data=data
bc.ln=new line
bc.message=message2
bc.print=print
bc.line_number=line#
bc.row_number=row#
bc.character_number=char#
bg.MaSD_file=SD File
bc.File=File
bg.MaSD_Write=SD Write
bg.MaSD_NewLine=SD New Line
bg.GROVE_CS=GROVE_CS
bg.DUPONT_CS=DUPONT_CS
bg.ESPLORA_CS=ESPLORA_CS
bg.MaSD_Connect=SD Connect
bg.MaSD_separator=SD Separator
bc.space=Space
bc.tab=Tabulation

bg.variable_poly=Char
bg.setter_variable_char=set char variable
bg.char=A
bd.chars= Chars Test
bg.not_equal_poly= !=
bg.equal_string= ==
bg.not_equal_string= !=
bg.equal_poly= ==
bg.glue_poly=glue
bg.serial_read_poly=serial read
bg.serial_parseInt=serial parseInt
bg.serial_available=serial data available
bg.serial_available2=serial data available
bg.program=program
bc.setup=setup
bc.loop=loop
bg.setup=setup
bc.par=input
bc.vecsize=size
bc.num=#
bg.variable_fake=Table
bg.fake=fake
bg.variable_vector=Table
bc.position=position
bg.create_variable_vector=create an array
bg.setter_variable_vector=set an array member
bg.string_greater= >
bg.string_less= <
bg.string_equal= ==
bg.string_greater_equal= >=
bg.string_less_equal= <=
bg.string_not_equal= !=
bg.string_equals= equals
bg.string_equalsIgnoreCase=equalsIgnoreCase
bg.string_toInt=toInt
bg.string_compareTo=compareTo

bg.code_head=add code on Head
bg.code_setup=add code on Setup
bg.setter_variable_String=set String variable
bg.setter_variable_String.description=set String variable
bg.variable_String=STRING
bg.variable_String.description=String variable
bg.code_loop=add code on Loop
bg.serial_read=serial read
bd.especial=Especial
bg.equal_digital===
bg.not_equal_digital=!=
bg.repeat=repeat
bg.break=break
bc.var=iteration variable name
bg.glue_msg=glue

# BlockDrawer name
bc.angle=angle
bc.base=base
bc.condition=test
bc.else=else
bc.exponent=exponent
bc.from=from
bc.level=level
bc.max=max
bc.min=min
bc.microseconds=microseconds
bc.milliseconds=milliseconds

# BlockConnector label
bc.pin_number=pin#
bc.status=status
bc.test=test
bc.then=then
bc.to=to
bc.value=value
bc.variable=variable
bc.frequency=frequency
bc.do=do
bc.device_address=device address
bc.register_address=register address
bc.watchdog_enable=Enable
bc.eeprom_address=address
bc.eeprom_data=data
bc.motor_channel=motor channel
bc.motor_speed=motor speed

bc.scoop_event_flag=Event

bd.control=Control
bd.scoop=Multitask
bd.number=Data
bd.operators=Mathematics
bd.pins=Pins
bd.inputs=Inputs
bd.outputs=Outputs
bd.communication=Communication
bd.storage=Storage


bd.utilities=Generic Hardware
# BlockGenus initlabel
bg.df_lcd_keypad=DFRobot LCD Keypad
bg.abs=abs
bg.addition=+
bg.and=and
bg.cos=cos

bg.scoop_task=Task
bg.scoop_sleep=Task Sleep
bg.scoop_pin_event=Task Event
bg.scoop_event_low=Event: LOW
bg.scoop_event_high=Event: HIGH
bg.scoop_event_falling=Event: FALLING
bg.scoop_event_rising=Event: RISING
bg.scoop_event_change=Event: CHANGE

bg.delay=delay MILLIS
bg.delay_microseconds=delay MICROS


bg.digital-high=HIGH
bg.digital-low=LOW
bg.digital-off=OFF
bg.digital-on=ON
bg.division=/
bg.equal===
bg.false=FALSE
bg.glue_sb=glue
bg.glue_sn=glue
bg.dummy=dummy
bg.greater=>
bg.greater_equal=>=
bg.if=if
bg.ifelse=if/else
bg.less=<
bg.less_equal=<=
bg.loop=loop
bg.subroutine=subroutine
bg.subroutine-ref=subroutine
bg.subroutine_var=subroutine_with_value
bg.subroutine-ref_var=subroutine_with_value
bg.ref_var=variable_transmitted
bc.transmit=transmit
bg.map=map
bg.map_common=map [0, 1023] to [0, 255]
bg.toint=to tint
bg.max=max
bg.message=message
bg.variable_millis=millis
bg.min=min
bg.modulo=%
bg.multiplication=x
bg.not=not
bg.not_equal=!=
bg.char=A
bg.number=1
bg.number_long=1000000
bg.number_double=3.1415927
bg.number-single=1
bg.number-single-I2C-address=3F
bg.number-single-fixed-parallel=Parallel
bg.or=or
bg.pin-read-analog=analog pin
bg.pin-read-digital=digital pin
bg.pin-read-digital-pullup=input pullup
bg.pin-write-analog=set analog pin
bg.pin-write-digital=set digital pin
bg.pin-toggle=Toggle digital pin
bg.pow=power
bg.random=random
bg.repeat_times=repeat
bg.seeed_joystick=Grove Thumb Joystick
bg.seeed_joystick_button=Grove Thumb Joystick Button
bg.watchdog_15ms=WDTO_15MS
bg.watchdog_30ms=WDTO_30MS
bg.watchdog_60ms=WDTO_60MS
bg.watchdog_120ms=WDTO_120MS
bg.watchdog_250ms=WDTO_250MS
bg.watchdog_500ms=WDTO_500MS
bg.watchdog_1s=WDTO_1S
bg.watchdog_2s=WDTO_2S
bg.watchdog_4s=WDTO_4S
bg.watchdog_8s=WDTO_8S
bg.watchdog_setup=Watchdog
bg.watchdog_reset=Watchdog Reset
bg.sd_write=SD flash write
bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=read byte from EEPROM
bg.eeprom_write=write byte to EEPROM
bg.random_range=random



bg.serial_write=serial.write()
bg.serial_println=serial println
bg.ir_setport=set IR port
bg.ir_getcode=get IR code
bg.bluno_println=bluno println
bg.bluno_println_number=bluno println
bg.bluno_println_clear=bluno clear
bg.serial_print=serial print
bg.serial_read=serial read
bg.equal_digital===
bg.not_equal_digital=!=
bg.repeat=repeat and count
bg.glue_msg=glue message
bg.servo=Servo
bg.servo_prefix=Servo : 
bg.servo_default=Servo : Default
bg.servo_sg90=Servo : SG90
bg.servo_mg996r=Servo : MG996R
bg.setter_variable_digital=set digital variable
bg.setter_variable_number=set integer variable
bg.setter_variable_number_unsigned_long=set large integer variable
bg.setter_variable_number_double=set decimal number variable
bg.sin=sin
bg.sqrt=sqrt
bg.subtraction=-
bg.tan=tan
bg.true=TRUE
bg.string_equal=equals
bg.string_empty=is empty

bg.ultrasonic=ultrasonic
bg.LCD_I2C_Sainsmart_20by4=20by4 I2C  Sainsmart
bg.LCD_I2C_Sainsmart_16by2=16by2 I2C  Sainsmart
bg.LCD_PLL_Sainsmart_16by2=16by2 PLL Sainsmart
bg.LCD_command_clear=CLEAR
bg.LCD_command_home=HOME
bg.LCD_command_lightOn=Light On
bg.LCD_command_lightOff=Light Off
bg.LCD_command_cursorOn= Cursor On
bg.LCD_command_cursorOff=Cursor Off
bg.LCD_command_blinkOn= Blink On
bg.LCD_command_blinkOff=Blink Off
bg.variable_digital=Bool
bg.variable_number=Integer
bg.variable_number_unsigned_long=Unsigned_long
bg.variable_number_double=Double
bg.variable_string=string name
bg.while=while
bg.do_while=do while
bg.wire_isread=read I2C ok?
bg.wire_read=read from I2C
bg.wire_write=write to I2C
bg.wire_write_one_byte=I2C write 1
bg.tone=tone
bg.tone_time=tone
bg.no_tone=no tone
bg.DDRA=DDRA
bg.DDRB=DDRB
bg.DDRC=DDRC
bg.DDRD=DDRD
bg.DDRH=DDRH
bg.DDRL=DDRL
bg.PORTA=PORTA
bg.PORTB=PORTB
bg.PORTC=PORTC
bg.PORTD=PORTD
bg.PORTH=PORTH
bg.PORTL=PORTL
bg.PORTA2=PORTA
bg.PORTB2=PORTB
bg.PORTC2=PORTC
bg.PORTD2=PORTD
bg.PORTH2=PORTH
bg.PORTL2=PORTL
bg.PORT_FIX=Set digitals pins :
bg.PORT_FIX.description=
bg.LEVEL1=ON
bg.LEVEL0=OFF
bg.PINA=PINA
bg.PINB=PINB
bg.PINC=PINC
bg.PIND=PIND
bg.PINH=PINH
bg.PINL=PINL
bg.xcj_motor_backward=motor shield backward
bg.xcj_motor_forward=motor shield forward
bg.xcj_ms_digital_read=Xinchejian digitalRead
bg.xcj_ms_digital_write=Xinchejian digitalWrite
bg.code_loop=loop
bg.code_head=head
bg.code_setup=setup

bd.logic=Tests
bd.communication=Communication
bd.especial=Code Blocks


ardublock.file.suffix=Ardublock Program File(*.abp)
ardublock.ui.new=New
ardublock.ui.save=Save
ardublock.ui.saveAs=Save As
ardublock.ui.load=Open
ardublock.ui.upload=Upload to Arduino
ardublock.ui.clone=Clone
ardublock.ui.add_comment=Add Comment
ardublock.ui.delete_comment=Delete Comment
ardublock.ui.organize_blocks=Organize all blocks
ardublock.ui.create_refer=create reference
ardublock.ui.website=Go to Web Site
ardublock.ui.serialMonitor=Serial Monitor
ardublock.ui.saveImage=Save as image...
ardublock.ui.version=2017-02 (basic)

ardublock.error_msg.digital_var_slot=Digital variable slot must take a 'digital variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.number_var_slot=Standard variable slot must take a standard 'Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.long_number_var_slot=Large integer variable slot must take a 'Large Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.double_number_var_slot=variable slot must take a 'Decimal' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.char_var_slot=Char variable slot must take a char variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_var_slot='Array variable' slot must take an 'array variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_size_slot='Array size' slot must take a standard integer constant
ardublock.error_msg.string_var_slot=String variable slot must take a String variable name.\nHint: Look at the 'variable' socket on the highlighted block
  
ardublock.translator.exception.subroutineNameDuplicated=two or more subroutines have the same name!
ardublock.translator.exception.noLoopFound=No loop found!
ardublock.translator.exception.multipleLoopFound=multiple loop block found!
ardublock.translator.exception.socketNull=A required Value, Variable Name or 'Test' is missing.\nHint:: Look for an empty 'socket' in the highlighted block.
ardublock.translator.exception.subroutineNotDeclared=subroutine not declared

message.title.error=Error
message.title.question=Question
message.content.open_unsaved=Ardublock program has changed, do you want to save?
message.content.overwrite=Do you want overwrite existing file?
message.file_not_found=File Not Found or Permission Denied
message.question.newfile_on_workspace_changed=The program has changed, do you want to create a new Ardublock file?

bc.repeat_times=times

# Descriptions of all Block

bg.program.description=Main program with loop and setup
bg.loop.description=Main Program loop without setup

bg.scoop_sleep.description=Delay execution of current thread for x milliseconds
bg.scoop_task.description=Task with loop and setup
bg.scoop_pin_event.description=Pin Event
bg.scoop_event_low.description=Event triggered when pin is low
bg.scoop_event_high.description=Event triggered when pin is high
bg.scoop_event_falling.description=Event triggered when pin is falling
bg.scoop_event_rising.description=Event triggered when pin is rising
bg.scoop_event_change.description=Event triggered when pin is change 

bg.delay.description=Delay for "milliseconds" indicated.\nNOTE: 1000 millis = 1 second
bg.if.description=Execute the commands if the "test" is true
bg.ifelse.description=Execute the first set of commands if the "test" is true, otherwise it will do the second set of commands.
bg.while.description=Execute the commands as long as the "test" is true
bg.do_while.description=Execute the list of commands. Then, if 'test' is true, keep on repeating it until 'test' is 'false'
bg.repeat_times.description=Repeat the commands. Stop after "times" repetitions.
bg.repeat.description=Repeat the commands. Stop after "times" repetitions. "variable" counts the repetitions.
bg.break.description=break 
bg.subroutine.description=Add a subroutine
bg.subroutine-ref.description=Invoke subroutine
bg.delay_microseconds.description=Delay for "microseconds" indicated. \nNOTE: 1000000 micros = 1 second
bg.pin-read-analog.description=Read analog value from pin
bg.pin-read-digital.description=Read digital value from pin
bg.pin-read-digital-pullup.description=set digital pin with internal pullup
bg.pin-write-digital.description=write digital to pin
bg.pin-toggle.description=toggle digital pin
bg.pin-write-analog.description=write analog to pin
bg.addition.description=Sum of two numbers
bg.subtraction.description=Difference of two numbers
bg.multiplication.description=Product of two numbers
bg.division.description=Quotient of two numbers
bg.random.description=Generate a random number less than the number
bg.map_common.description=map value from [0, 1023] to [0, 255]
bg.map.description=Map value from "from" range to "to" range
bg.toint.description=string to tint
bg.constrain.description=Constrain a number between two values
bg.dummy.description=
bg.greater.description=True if the first number is greater the second number
bg.less.description=True if the first number is less then the second number
bg.equal.description=True if the first number equals to the scond number
bg.equal_digital.description=True if the first number equals to the scond number
bg.greater_equal.description=True if the first number is greater or equal to the second number
bg.less_equal.description=True if the first number is less or equal to the second number
bg.not_equal.description=True if the first number is not equal to the second number
bg.not_equal_digital.description=True if the first number is not equal to the second number
bg.and.description=True if both of the two conditions are true.
bg.or.description=True if one or both of the two conditions are true.
bg.not.description=The opposite of
bg.equal_poly.description=True if first character is equal to the second character
bg.not_equal_poly.description=True if first character is not equal to the second character
bg.equal_string.description=True if first string is equal to the second string
bg.not_equal_string.description=True if first string is not equal to the second string
bg.string_greater.description= True if first string is  to the second string
bg.string_less.description= True if first string is  to the second string
bg.string_equal.description= True if first string is  to the second string
bg.string_greater_equal.description= True if first string is  to the second string
bg.string_less_equal.description= True if first string is  to the second string
bg.string_not_equal.description= True if first string is  to the second string
bg.string_equals.description=True if first string is  to the second string
bg.string_equalsIgnoreCase.description=True if first string is  to the second string
bg.string_toInt.description=True if a numeric string compared to the number it represents
bg.string_compareTo.description=True if first string is  to the second string
bg.variable_millis.description=milliseconds since last power-up or reset. Note: Use a 'Large Integer' variable.
bg.true.description=Boolean True.
bg.false.description=Boolean False.
bg.digital-high.description=Pin HIGH
bg.digital-low.description=Pin LOW
bg.string_equal.description=True if two strings are equal
bg.string_empty.description=True if string is empty
bg.char.description=Character constant
bg.number.description=Standard integer constant. 32,768 to +32,767
bg.number_long.description=Large integer constant. 0 to 4,294,967,295
bg.number_double.description='Decimal' number constant. +/- 3.4028235E+38
bg.variable_number.description=Standard integer variable. -32,768 to +32,767
bg.variable_number_unsigned_long.description=Unsigned_long
bg.variable_number_double.description='Decimal' variable name
bg.variable_digital.description=Digital variable
bg.variable_string.description=string variable
bg.setter_variable_number.description=Set standard integer variable. -32,768 to +32,767
bg.setter_variable_number_unsigned_long.description=Set large integer variable. 0 to 4,294,967,295
bg.setter_variable_number_double.description=Set 'Decimal' variable. +/- 3.4028235E+38
bg.setter_variable_digital.description=Set digital variable
bg.variable_vector.description=Get the value of an array member
bg.create_variable_vector.description=Create an array of standard integers. -32,768 to +32,767
bg.setter_variable_vector.description=Set the value of an array member
bc.array=Name the array
bg.setter_variable_char.description=Set a character variable
bg.variable_poly.description=Character variable name
bg.servo.description=Control a servo
bg.servo_sg90.description=Control an SG90 servo
bg.servo_mg996r.description=Control an MG996R servo
bg.servo_default.description=Control a servo
bg.ultrasonic.description=Ultrasonic distance sensor
bg.LCD_I2C_Sainsmart_20by4.description= Sainsmart LCD Display. I2C. 20 Char by 4 Lines
bg.LCD_I2C_Sainsmart_16by2.description= Sainsmart LCD Display. I2C. 16 Char by 2 Lines
bg.LCD_PLL_Sainsmart_16by2.description= Sainsmart LCD Display. Parallel. 16 Char by 2 Lines
bg.LCD_command_clear.description=Clear an LCD display
bg.LCD_command_home.description=LCD display home
bg.LCD_command_lightOn.description=LCD display light on.
bg.LCD_command_lightOff.description=LCD display light off
bg.LCD_command_cursorOn.description=LCD display cursor on.
bg.LCD_command_cursorOff.description=LCD display cursor off
bg.LCD_command_blinkOn.description=LCD display blink on.
bg.LCD_command_blinkOff.description=LCD display blink off
bg.tone.description=Generates a square wave of the specified frequency (and 50%	duty cycle) on a pin.
bg.tone_time.description=Generates a square wave of the specified frequency (and 50% duty cycle) on a pin.
bg.no_tone.description=Stops the generation of a square wave triggered by tone().
bg.DDRA.description=DDRA
bg.DDRB.description=DDRB
bg.DDRC.description=DDRC
bg.DDRD.description=DDRD
bg.DDRH.description=DDRH
bg.DDRL.description=DDRL
bg.PORTA.description=PORTA
bg.PORTB.description=PORTB
bg.PORTC.description=PORTC
bg.PORTD.description=PORTD
bg.PORTH.description=PORTH
bg.PORTL.description=PORTLZ
bg.PINA.description=PINA
bg.PINB.description=PINB
bg.PINC.description=PINC
bg.PIND.description=PIND
bg.PINH.description=PINH
bg.PINL.description=PINL
bg.serial_write.description=Send message via Serial
bg.serial_print.description=Send message via Serial port
bg.message.description=Text message
bg.glue_sn.description=Glue number to string
bg.glue_sb.description=Glue boolean to string
bg.glue_poly.description=Glue char to string
bg.wire_write.description=Write data via I2C
bg.wire_read.description=Read data from i2c
bg.wire_isread.description=Is last read from I2C success?
bg.eeprom_read.description=Read a byte (0-255) from EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_write.description=Write a byte (0-255) to EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_read_int.description=Read an int (+/- 32,767) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_write_int.description=Write an int (+/- 32,767) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_read_long.description=Read a 'long' (0 - 4,294,967,295) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.eeprom_write_long.description=Write a 'long' (0 - 4,294,967,295) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.sd_write2.description=Write to SD card
bg.code_loop.description=Add raw codes to loop()
bg.code_head.description=Add raw codes to head
bg.code_setup.description=Add raw codes to setup()
bg.glue_msg.description=Glue a text message
bg.variable_fake.description=Digital Var				
bg.serial_println.description=Send message via Serial port with a return
bg.ir_setport.description=Set Port where IR Receiver attached
bg.ir_getcode.description=Get code from ir receiver and store in a variable string
bg.bluno_println.description=println string on bluno oled
bg.bluno_println_clear.description=clear bluno oled
bg.bluno_println_number.description=println number on bluno oled 
bg.xcj_motor_forward.description=forward
bg.xcj_motor_backward.description=Moving the car backward
bg.xcj_ms_digital_write.description=Write digital signal to Socket
bg.xcj_ms_digital_read.description=Read digital status from socket

bc.step2=Step
bc.name=Name
bg.DuinoEDU_D2=D2
bg.DuinoEDU_D3=D3
bg.DuinoEDU_D4=D4
bg.DuinoEDU_D5=D5
bg.DuinoEDU_D6=D6
bg.DuinoEDU_D7=D7
bg.DuinoEDU_D8=D8
bg.DuinoEDU_D9=D9
bg.DuinoEDU_D10=D10
bg.DuinoEDU_D11=D11
bg.DuinoEDU_D12=D12
bg.DuinoEDU_D13=D13
bg.DuinoEDU_D14=D14
bg.DuinoEDU_D15=D15
bg.DuinoEDU_D16=D16
bg.DuinoEDU_D17=D17
bg.DuinoEDU_D18=D18
bg.DuinoEDU_D19=D19
bg.DuinoEDU_D20=D20
bg.DuinoEDU_D21=D21
bg.DuinoEDU_A0=A0
bg.DuinoEDU_A1=A1
bg.DuinoEDU_A2=A2
bg.DuinoEDU_A3=A3
bg.DuinoEDU_A4=A4
bg.DuinoEDU_A5=A5
bg.DuinoEDU_A6=A6
bg.DuinoEDU_A7=A7
bg.DuinoEDU_A8=A8
bg.DuinoEDU_A9=A9
bg.DuinoEDU_A10=A10
bg.DuinoEDU_A11=A11
bg.DuinoEDU_A12=A12
bg.DuinoEDU_A13=A13
bg.DuinoEDU_A14=A14
bg.DuinoEDU_A15=A15


bg.Serialplus_send_variable_number=Send
bg.Serialplus_send_variable_number.description=Send a variable on a channel and on a serial port.
bg.Serialplus_send_variable_digital=Send 
bg.Serialplus_send_variable_digital.description=Send a variable on a channel and on a serial port.
bg.Serialplus_receive_number=Receive
bg.Serialplus_receive_number.description=Receive a variable on a channel and on a serial port.
bg.Serialplus_receive_digital=Receive
bg.Serialplus_receive_digital.description=Receive a variable on a channel and on a serial port.
bc.channel=channel
bc.interval=interval


bc.commands=Commands





#legacy support
bg.loop1=loop
bg.loop1.description=loop
bg.loop2=loop
bg.loop2.description=loop
bg.loop3=loop
bg.loop3.description=loop

