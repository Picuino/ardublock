bc.start=Start
bg.repeat_control=Repeat between
bg.repeat_control.description=Repeat the commands with "variable" ranging between "start" and "stop" values. "variable" changes by "increment" after each repetition
bc.end=Stop
bc.increment=Steps of
bg.constrain=Constrain
bc.low=Lower
bc.high=Higher
bg.sd_write2=Write to SD
bg.sd_write=SD flash write
bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=Read 'byte' EEPROM
bg.eeprom_write=Write 'byte' EEPROM
bg.eeprom_read_int=Read number from EEPROM
bg.eeprom_write_int=Write number to EEPROM
bg.eeprom_read_long=Read 'long' from EEPROM
bg.eeprom_write_long=Write 'long' to EEPROM
bd.storage=Storage
bc.device_address=Device address
bc.register_address=Register address
bc.watchdog_enable=Enable
bc.eeprom_address=Address
bc.eeprom_data=Data
bc.ln=New line
bc.message=Text
bc.print=Print
bc.line_number=Line#
bc.row_number=Row#
bc.character_number=Char#
bg.MaSD_file=SD File
bc.File=File
bg.MaSD_Write=SD Write
bg.MaSD_NewLine=SD New Line
bg.GROVE_CS=GROVE_CS
bg.DUPONT_CS=DUPONT_CS
bg.MaSD_Connect=SD Connect
bg.MaSD_separator=SD Separator
bc.space=Space
bc.tab=Tabulation

bd.chars=Chars Test
bg.not_equal_poly= !=
bg.equal_string= ==
bg.not_equal_string= !=
bg.equal_poly= ==
bg.program=Program
bc.setup=Setup
bc.loop=Loop
bg.setup=Setup
bc.par=Input
bc.vecsize=Size
bc.num=#
bg.fake=Fake
bc.position=Position
bg.string_greater= >
bg.string_less= <
bg.string_equal= ==
bg.string_greater_equal= >=
bg.string_less_equal= <=
bg.string_not_equal= !=
bg.string_equals= equals
bg.string_equalsIgnoreCase=EqualsIgnoreCase
bg.string_compareTo=CompareTo

bg.code_head=Add code on Head
bg.code_setup=Add code on Setup
bg.code_loop=Add code on Loop
bd.especial=Especial
bg.equal_digital===
bg.not_equal_digital=!=
bg.repeat=Repeat
bg.break=Break
bc.var=Iteration variable name

# BlockDrawer name
bc.angle=Angle
bc.base=Base
bc.condition=Test
bc.else=Else
bc.exponent=Exponent
bc.from=From
bc.level=Level
bc.max=Max
bc.min=Min
bc.microseconds=Microseconds
bc.milliseconds=Milliseconds

# BlockConnector label
bc.pin_number=Pin#
bc.status=Status
bc.test=Test
bc.then=Then
bc.to=To
bc.value=Value
bc.variable=Variable
bc.frequency=Frequency
bc.do=Do
bc.device_address=Device address
bc.register_address=Register address
bc.watchdog_enable=Enable
bc.eeprom_address=Address
bc.eeprom_data=Data
bc.motor_channel=Motor channel
bc.motor_speed=Motor speed

bc.scoop_event_flag=Event

bd.control=Control
bd.task=Multitask
bd.number=Data
bd.number-bin=Binary Data
bd.number-hex=Hexadecimal Data
bd.operators=Mathematics
bd.pins=Pins
bd.inputs=Inputs
bd.outputs=Outputs
bd.communication=Communication
bd.storage=Storage


bd.utilities=Generic Hardware
# BlockGenus initlabel
bg.abs=Abs
bg.addition=+
bg.and=And
bg.cos=Cos

bg.scoop_task=Task
bg.scoop_sleep=Task Sleep
bg.scoop_pin_event=Task Event
bg.scoop_event_low=Event: LOW
bg.scoop_event_high=Event: HIGH
bg.scoop_event_falling=Event: FALLING
bg.scoop_event_rising=Event: RISING
bg.scoop_event_change=Event: CHANGE

bg.delay=Delay milliseconds
bg.delay_microseconds=Delay microseconds
bg.delay.description=Delay for "milliseconds" indicated.\nNOTE: 1000 millis = 1 second
bg.delay_microseconds.description=Delay for "microseconds" indicated. \nNOTE: 1000000 micros = 1 second


bg.digital-high=HIGH
bg.digital-low=LOW
bg.digital-off=OFF
bg.digital-on=ON
bg.division=/
bg.equal===
bg.false=FALSE
bg.dummy=Dummy
bg.greater=>
bg.greater_equal=>=
bg.if=If
bg.ifelse=If/else
bg.less=<
bg.less_equal=<=
bg.loop=Loop
bg.subroutine=Subroutine
bg.subroutine-ref=Subroutine
bg.subroutine_var=Subroutine_variable
bg.subroutine-ref_var=Subroutine_variable
bg.ref_var=Variable_transmitted
bc.transmit=Transmit
bg.map=Map
bg.map_common=Map [0, 1023] to [0, 255]
bg.max=Max
bg.message=Text
bg.variable_millis=Millis
bg.min=Min
bg.modulo=%
bg.multiplication=x
bg.not=Not
bg.not_equal=!=

bg.char_to_int=Cast
bg.bool_to_int=Cast
bg.string_to_int=Cast
bg.char_to_int.description=Convert character to Integer number
bg.bool_to_int.description=Convert boolean value to Integer number
bg.string_to_int.description=Convert String to Integer number

bg.char=A
bg.number=1
bg.number-bin=00010001
bg.number-hex=7F
bg.number_long=1000000
bg.number_double=3.1415927
bg.number-single=1
bg.number-single-fixed-parallel=Parallel
bg.or=Or
bg.pin-read-analog=Analog pin
bg.pin-read-digital=Digital pin
bg.pin-read-digital-pullup=Input pullup
bg.pin-write-analog=Set analog pin
bg.pin-write-digital=Set digital pin
bg.pin-toggle=Toggle digital pin
bg.pow=Power
bg.random=Random
bg.repeat_times=Repeat
bg.watchdog_15ms=WDTO_15MS
bg.watchdog_30ms=WDTO_30MS
bg.watchdog_60ms=WDTO_60MS
bg.watchdog_120ms=WDTO_120MS
bg.watchdog_250ms=WDTO_250MS
bg.watchdog_500ms=WDTO_500MS
bg.watchdog_1s=WDTO_1S
bg.watchdog_2s=WDTO_2S
bg.watchdog_4s=WDTO_4S
bg.watchdog_8s=WDTO_8S
bg.watchdog_setup=Watchdog
bg.watchdog_reset=Watchdog Reset
bg.sd_write=SD flash write
bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=Read byte from EEPROM
bg.eeprom_write=Write byte to EEPROM
bg.random_range=Random

# Infrared
bg.ir_setport=Infrared Set port
bg.ir_getcode=Infrared Get code
bg.ir_setport.description=Set Port where Infrared Receiver attached
bg.ir_getcode.description=Get code from Infrared receiver and store in a variable string

# I2C communications
bg.wire_write=I2C Write
bg.wire_write_one_byte=I2C Write
bg.wire_isread=I2C Read Ok?
bg.wire_read=I2C Read
bg.wire_write.description=Write data via I2C to a register
bg.wire_write_one_byte.description=Write data via I2C
bg.wire_read.description=Read data from I2C
bg.wire_isread.description=Is last read from I2C success?
bc.device_address_I2C=Address 0x
bg.number-single-I2C-address=3F


# Serial communications
bg.serial_write=Serial write
bg.serial_print=Serial print
bg.serial_println=Serial print + newline
bg.serial_available=Serial data available
bg.serial_read=Serial read
bg.serial_read_poly=Serial read
bg.serial_parseInt=Serial read integer
bg.serial_write.description=Send byte via Serial port
bg.serial_print.description=Send message via Serial port
bg.serial_println.description=Send message and newline via Serial port
bg.serial_available.description=Number of bytes available to read from Serial port
bg.serial_parseInt.description=Read an integer number from Serial string received

bg.glue_sb=Glue
bg.glue_sn=Glue
bg.glue_poly=Glue
bg.glue_msg=Glue
bg.glue_sb.description=Glue boolean to string
bg.glue_sn.description=Glue number to string
bg.glue_poly.description=Glue char to string
bg.glue_msg.description=Glue a text message

bg.equal_digital===
bg.not_equal_digital=!=
bg.repeat=Repeat and count
bg.servo=Servo
bg.servo_prefix=Servo :
bg.servo_default=Servo : Default
bg.servo_sg90=Servo : SG90
bg.servo_mg996r=Servo : MG996R
bg.sin=Sin
bg.sqrt=Sqrt
bg.subtraction=-
bg.tan=Tan
bg.true=TRUE
bg.string_equal=Equals
bg.string_empty=Is empty

bg.ultrasonic=Ultrasonic
bg.LCD_I2C_Sainsmart_20by4=20by4 I2C  Sainsmart
bg.LCD_I2C_Sainsmart_16by2=16by2 I2C  Sainsmart
bg.LCD_PLL_Sainsmart_16by2=16by2 PLL Sainsmart
bg.LCD_command_clear=CLEAR
bg.LCD_command_home=HOME
bg.LCD_command_lightOn=Light On
bg.LCD_command_lightOff=Light Off
bg.LCD_command_cursorOn= Cursor On
bg.LCD_command_cursorOff=Cursor Off
bg.LCD_command_blinkOn= Blink On
bg.LCD_command_blinkOff=Blink Off
bg.while=While
bg.do_while=Do while
bg.tone=Tone
bg.tone_time=Tone
bg.no_tone=No tone
bg.DDRA=DDRA
bg.DDRB=DDRB
bg.DDRC=DDRC
bg.DDRD=DDRD
bg.DDRH=DDRH
bg.DDRL=DDRL
bg.PORTA=PORTA
bg.PORTB=PORTB
bg.PORTC=PORTC
bg.PORTD=PORTD
bg.PORTH=PORTH
bg.PORTL=PORTL
bg.PORT_FIX=Set digital pins
bg.PORT_FIX.description=
bg.PINA=PINA
bg.PINB=PINB
bg.PINC=PINC
bg.PIND=PIND
bg.PINH=PINH
bg.PINL=PINL
bg.code_loop=Loop
bg.code_head=Head
bg.code_setup=Setup

bd.logic=Tests
bd.communication=Communication
bd.especial=Source code

# Data
bg.variable_poly=Char
bg.char=A
bc.array=Vector
bg.variable_vector=Variable_Vector
bg.variable_String=Variable_String
bg.variable_digital=Variable_Bool
bg.variable_number=Variable_Integer
bg.variable_number_unsigned_long=Variable_Large_Integer
bg.variable_number_double=Variable_Float
bg.variable_string=Variable_String
bg.setter_variable_number=Integer =
bg.setter_variable_digital=Digital =
bg.setter_variable_char=Char =
bg.setter_variable_number_unsigned_long=Large Integer =
bg.setter_variable_number_double=Decimal number =
bg.setter_variable_String=String =
bg.setter_variable_vector=Vector =
bg.create_variable_vector=Create Vector
bg.setter_variable_String.description=Set String variable
bg.char.description=Character constant
bg.variable_String.description=String variable

bg.variable_fake=Variable_Vector
bg.variable_fake.description=Vector variable

bg.true.description=Boolean True
bg.false.description=Boolean False
bg.digital-high.description=Pin HIGH
bg.digital-low.description=Pin LOW

bg.string_equal.description=True if two strings are equal
bg.string_empty.description=True if string is empty
bg.number.description=Standard integer constant. 32,768 to +32,767
bg.number_long.description=Large integer constant. 0 to 4,294,967,295
bg.number_double.description='Decimal' number constant. +/- 3.4028235E+38
bg.variable_number.description=Standard integer variable. -32,768 to +32,767
bg.variable_number_unsigned_long.description=Unsigned_long
bg.variable_number_double.description='Decimal' variable name
bg.variable_digital.description=Digital variable
bg.variable_string.description=String variable
bg.setter_variable_number.description=Set standard integer variable. -32,768 to +32,767
bg.setter_variable_number_unsigned_long.description=Set large integer variable. 0 to 4,294,967,295
bg.setter_variable_number_double.description=Set 'Decimal' variable. +/- 3.4028235E+38
bg.setter_variable_digital.description=Set digital variable
bg.variable_vector.description=Get the value of a vector member
bg.create_variable_vector.description=Create a vector of standard integers. -32,768 to +32,767
bg.setter_variable_vector.description=Set the value of a vector member
bg.setter_variable_char.description=Set a character variable
bg.variable_poly.description=Character variable name


ardublock.file.suffix=Ardublock Program File(*.abp)
ardublock.ui.new=New
ardublock.ui.save=Save
ardublock.ui.saveAs=Save As
ardublock.ui.load=Open
ardublock.ui.upload=Upload to Arduino
ardublock.ui.clone=Clone
ardublock.ui.add_comment=Add Comment
ardublock.ui.delete_comment=Delete Comment
ardublock.ui.organize_blocks=Organize all blocks
ardublock.ui.create_refer=Create reference
ardublock.ui.serialMonitor=Serial Monitor
ardublock.ui.saveImage=Save image...
ardublock.ui.website1=Ardublock Web
ardublock.ui.website1.url=http://blog.ardublock.com/
ardublock.ui.website2=Picuino Web
ardublock.ui.website2.url=http://www.picuino.com/es/arduprog/pc42-index.html
ardublock.ui.image_resolution=150
ardublock.ui.version=2017-03

ardublock.error_msg.digital_var_slot=Digital variable slot must take a 'digital variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.number_var_slot=Standard variable slot must take a standard 'Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.long_number_var_slot=Large integer variable slot must take a 'Large Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.double_number_var_slot=Variable slot must take a 'Decimal' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.char_var_slot=Char variable slot must take a char variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_var_slot='Vector variable' slot must take a 'vector variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_size_slot='Vector size' slot must take a standard integer constant
ardublock.error_msg.string_var_slot=String variable slot must take a String variable name.\nHint: Look at the 'variable' socket on the highlighted block

ardublock.translator.exception.subroutineNameDuplicated=Two or more subroutines have the same name!
ardublock.translator.exception.noLoopFound=No loop found!
ardublock.translator.exception.multipleLoopFound=Multiple loop block found!
ardublock.translator.exception.socketNull=A required Value, Variable Name or 'Test' is missing.\nHint:: Look for an empty 'socket' in the highlighted block.
ardublock.translator.exception.subroutineNotDeclared=Subroutine not declared

message.title.error=Error
message.title.question=Question
message.content.open_unsaved=Ardublock program has changed, do you want to save?
message.content.overwrite=Do you want overwrite existing file?
message.file_not_found=File Not Found or Permission Denied
message.question.newfile_on_workspace_changed=The program has changed, do you want to create a new Ardublock file?

bc.repeat_times=Times

# Descriptions of all Block

bg.program.description=Main program with loop and setup
bg.loop.description=Main Program loop without setup

bg.scoop_sleep.description=Delay execution of current thread for x milliseconds
bg.scoop_task.description=Task with loop and setup
bg.scoop_pin_event.description=Pin Event
bg.scoop_event_low.description=Event triggered when pin is low
bg.scoop_event_high.description=Event triggered when pin is high
bg.scoop_event_falling.description=Event triggered when pin is falling
bg.scoop_event_rising.description=Event triggered when pin is rising
bg.scoop_event_change.description=Event triggered when pin is change

bg.if.description=Execute the commands if the "test" is true
bg.ifelse.description=Execute the first set of commands if the "test" is true, otherwise it will do the second set of commands.
bg.while.description=Execute the commands as long as the "test" is true
bg.do_while.description=Execute the list of commands. Then, if 'test' is true, keep on repeating it until 'test' is 'false'
bg.repeat_times.description=Repeat the commands. Stop after "times" repetitions.
bg.repeat.description=Repeat the commands. Stop after "times" repetitions. "variable" counts the repetitions.
bg.break.description=Break
bg.subroutine.description=Add a subroutine
bg.subroutine-ref.description=Call subroutine
bg.pin-read-analog.description=Read analog value from pin
bg.pin-read-digital.description=Read digital value from pin
bg.pin-read-digital-pullup.description=Set digital pin with internal pullup
bg.pin-write-digital.description=Write digital to pin
bg.pin-toggle.description=Toggle digital pin
bg.pin-write-analog.description=Write analog to pin
bg.addition.description=Sum of two numbers
bg.subtraction.description=Difference of two numbers
bg.multiplication.description=Product of two numbers
bg.division.description=Quotient of two numbers
bg.random.description=Generate a random number less than the number
bg.map_common.description=Map value from [0, 1023] to [0, 255]
bg.map.description=Map value from "from" range to "to" range
bg.constrain.description=Constrain a number between two values
bg.dummy.description=
bg.greater.description=True if the first number is greater the second number
bg.less.description=True if the first number is less then the second number
bg.equal.description=True if the first number equals to the scond number
bg.equal_digital.description=True if the first number equals to the scond number
bg.greater_equal.description=True if the first number is greater or equal to the second number
bg.less_equal.description=True if the first number is less or equal to the second number
bg.not_equal.description=True if the first number is not equal to the second number
bg.not_equal_digital.description=True if the first number is not equal to the second number
bg.and.description=True if both of the two conditions are true.
bg.or.description=True if one or both of the two conditions are true.
bg.not.description=The opposite of
bg.equal_poly.description=True if first character is equal to the second character
bg.not_equal_poly.description=True if first character is not equal to the second character
bg.equal_string.description=True if first string is equal to the second string
bg.not_equal_string.description=True if first string is not equal to the second string
bg.string_greater.description= True if first string is  to the second string
bg.string_less.description= True if first string is  to the second string
bg.string_equal.description= True if first string is  to the second string
bg.string_greater_equal.description= True if first string is  to the second string
bg.string_less_equal.description= True if first string is  to the second string
bg.string_not_equal.description= True if first string is  to the second string
bg.string_equals.description=True if first string is  to the second string
bg.string_equalsIgnoreCase.description=True if first string is  to the second string
bg.string_compareTo.description=True if first string is  to the second string
bg.variable_millis.description=Milliseconds since last power-up or reset. Note: Use a 'Large Integer' variable.
bg.servo.description=Control a servo
bg.servo_sg90.description=Control a SG90 servo
bg.servo_mg996r.description=Control a MG996R servo
bg.servo_default.description=Control a servo
bg.ultrasonic.description=Ultrasonic distance sensor
bg.LCD_I2C_Sainsmart_20by4.description= Sainsmart LCD Display. I2C. 20 Char by 4 Lines
bg.LCD_I2C_Sainsmart_16by2.description= Sainsmart LCD Display. I2C. 16 Char by 2 Lines
bg.LCD_PLL_Sainsmart_16by2.description= Sainsmart LCD Display. Parallel. 16 Char by 2 Lines
bg.LCD_command_clear.description=Clear a LCD display
bg.LCD_command_home.description=LCD display home
bg.LCD_command_lightOn.description=LCD display light on.
bg.LCD_command_lightOff.description=LCD display light off
bg.LCD_command_cursorOn.description=LCD display cursor on.
bg.LCD_command_cursorOff.description=LCD display cursor off
bg.LCD_command_blinkOn.description=LCD display blink on.
bg.LCD_command_blinkOff.description=LCD display blink off
bg.tone.description=Generates a square wave of the specified frequency (and 50%	duty cycle) on a pin.
bg.tone_time.description=Generates a square wave of the specified frequency (and 50% duty cycle) on a pin.
bg.no_tone.description=Stops the generation of a square wave triggered by tone().
bg.DDRA.description=DDRA
bg.DDRB.description=DDRB
bg.DDRC.description=DDRC
bg.DDRD.description=DDRD
bg.DDRH.description=DDRH
bg.DDRL.description=DDRL
bg.PORTA.description=PORTA
bg.PORTB.description=PORTB
bg.PORTC.description=PORTC
bg.PORTD.description=PORTD
bg.PORTH.description=PORTH
bg.PORTL.description=PORTLZ
bg.PINA.description=PINA
bg.PINB.description=PINB
bg.PINC.description=PINC
bg.PIND.description=PIND
bg.PINH.description=PINH
bg.PINL.description=PINL
bg.message.description=Text message
bg.eeprom_read.description=Read a byte (0-255) from EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_write.description=Write a byte (0-255) to EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_read_int.description=Read an integer (+/- 32,767) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_write_int.description=Write an integer (+/- 32,767) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_read_long.description=Read a 'long' (0 - 4,294,967,295) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.eeprom_write_long.description=Write a 'long' (0 - 4,294,967,295) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.sd_write2.description=Write to SD card
bg.code_loop.description=Add raw codes to loop()
bg.code_head.description=Add raw codes to head
bg.code_setup.description=Add raw codes to setup()

bc.step2=Step
bc.name=Name

# Arduino Definitions
bg.Arduino_D2=D2
bg.Arduino_D3=D3
bg.Arduino_D4=D4
bg.Arduino_D5=D5
bg.Arduino_D6=D6
bg.Arduino_D7=D7
bg.Arduino_D8=D8
bg.Arduino_D9=D9
bg.Arduino_D10=D10
bg.Arduino_D11=D11
bg.Arduino_D12=D12
bg.Arduino_D13=D13
bg.Arduino_A0=A0
bg.Arduino_A1=A1
bg.Arduino_A2=A2
bg.Arduino_A3=A3
bg.Arduino_A4=A4
bg.Arduino_A5=A5

bc.channel=Channel
bc.interval=Interval

bc.commands=Commands

#legacy support
bg.loop1=Loop
bg.loop1.description=Loop
bg.loop2=Loop
bg.loop2.description=Loop
bg.loop3=Loop
bg.loop3.description=Loop


#Picuino
bd.picuino=Picuino Panel
bd.picuino_constants=Picuino Constants
bc.picuino_key=Button
bc.picuino_led=Led
bc.picuino_state=State
bc.picuino_time_on=Time On
bc.picuino_time_off=Time Off
bc.picuino_event=Event
bc.picuino_integer=Integer
bc.picuino_position=Position
bc.picuino_segments=Segments
bc.picuino_digit=Digit
bc.picuino_frequency=Frequency
bc.picuino_tone=Tone
bc.picuino_time=Time

bg.pc_ledWrite=Led Write
bg.pc_ledBlink=Led Blink
bg.pc_keyPressed=Key Pressed
bg.pc_keyValue=Key Value
bg.pc_keyEvents=Key Events
bg.pc_keyCount=Key Count
bg.pc_keyTimeOn=Key Time On
bg.pc_keyTimeOff=Key Time Off
bg.pc_dispNum=Display Number
bg.pc_dispWrite=Display Write
bg.pc_dispWrite4=Display Write x4
bg.pc_buzzFreq=Buzzer Frequency
bg.pc_buzzTone=Buzzer Tone
bg.pc_buzzPlay=Buzzer Play
bg.pc_buzzPlayLen=Buzzer Play Length
bg.pc_buzzOn=Buzzer On
bg.pc_buzzOff=Buzzer Off
bg.pc_begin=Reset Panel
bg.pc_dispBegin=Reset Display
bg.pc_buzzBegin=Reset Buzzer
bg.pc_ledBegin=Reset Leds
bg.pc_keyBegin=Reset Keys

bg.KEY_PRESSED_TIME1=KEY_PRESSED_TIME1
bg.KEY_PRESSED_TIME2=KEY_PRESSED_TIME2
bg.KEY_PRESSED_TIME3=KEY_PRESSED_TIME3
bg.KEY_RELEASED=KEY_RELEASED
bg.KEY_ALL=KEY_ALL
bg.KEY_LEFT=KEY_LEFT
bg.KEY_RIGHT=KEY_RIGHT
bg.KEY_UP=KEY_UP
bg.KEY_DOWN=KEY_DOWN
bg.KEY_ENTER=KEY_ENTER
bg.KEY_BACK=KEY_BACK
bg.DD_0=DD_0
bg.DD_1=DD_1
bg.DD_2=DD_2
bg.DD_3=DD_3
bg.DD_4=DD_4
bg.DD_5=DD_5
bg.DD_6=DD_6
bg.DD_7=DD_7
bg.DD_8=DD_8
bg.DD_9=DD_9
bg.DD_A=DD_A
bg.DD_b=DD_b
bg.DD_B=DD_B
bg.DD_C=DD_C
bg.DD_d=DD_d
bg.DD_E=DD_E
bg.DD_F=DD_F
bg.DD_G=DD_G
bg.DD_g=DD_g
bg.DD_H=DD_H
bg.DD_h=DD_h
bg.DD_I=DD_I
bg.DD_i=DD_i
bg.DD_J=DD_J
bg.DD_K=DD_K
bg.DD_L=DD_L
bg.DD_n=DD_n
bg.DD_ny=DD_ny
bg.DD_o=DD_o
bg.DD_O=DD_O
bg.DD_P=DD_P
bg.DD_q=DD_q
bg.DD_r=DD_r
bg.DD_S=DD_S
bg.DD_t=DD_t
bg.DD_u=DD_u
bg.DD_U=DD_U
bg.DD_y=DD_y
bg.DD_Y=DD_Y
bg.DD_Z=DD_Z
bg.DD_SP=DD_SP
bg.Silence=Silence
bg.Do3=Do3
bg.Do_3=Do_3
bg.Re3=Re3
bg.Re_3=Re_3
bg.Mi3=Mi3
bg.Fa3=Fa3
bg.Fa_3=Fa_3
bg.Sol3=Sol3
bg.Sol_3=Sol_3
bg.La3=La3
bg.La_3=La_3
bg.Si3=Si3
bg.Do4=Do4
bg.Do_4=Do_4
bg.Re4=Re4
bg.Re_4=Re_4
bg.Mi4=Mi4
bg.Fa4=Fa4
bg.Fa_4=Fa_4
bg.Sol4=Sol4
bg.Sol_4=Sol_4
bg.La4=La4
bg.La_4=La_4
bg.Si4=Si4
bg.Do5=Do5
bg.Do_5=Do_5
bg.Re5=Re5
bg.Re_5=Re_5
bg.Mi5=Mi5
bg.Fa5=Fa5
bg.Fa_5=Fa_5
bg.Sol5=Sol5
bg.Sol_5=Sol_5
bg.La5=La5
bg.La_5=La_5
bg.Si5=Si5
# Picuino End

# Makeblock
bd.makeblock=Makeblock
bc.me_shutter_state=Action
bc.me_port_number=Port #
bc.me_motor_number=Motor #
bc.me_m1=M1
bc.me_m2=M2
bc.me_command_number=Type
bc.me_speed_number=Speed
bc.me_acceleration_number=Acceler
bc.me_moveTo_number=MoveTo
bc.me_angle_number=Angle
bc.me_input_data=Data
bc.me_device_number=Device
bc.me_output_data=Data
bc.me_commands=Commands
bc.me_stepper_finish=Finish
bc.me_key_down=KeyDown
bc.me_key_up=KeyUp
bg.me_port_1=Port 1
bg.me_port_1.description= Me Base Shield Port
bg.me_port_2=Port 2
bg.me_port_3=Port 3
bg.me_port_4=Port 4
bg.me_port_5=Port 5
bg.me_port_6=Port 6
bg.me_port_7=Port 7
bg.me_port_8=Port 8
bg.me_motor_1=Motor_1
bg.me_motor_1.description= Me Base Shield DC Motor Port
bg.me_motor_2=Motor_2
bg.me_shutter_1=Shot On
bg.me_shutter_1.description= Me Shutter Action
bg.me_shutter_2=Shot Off
bg.me_shutter_3=Focus On
bg.me_shutter_4=Focus Off
bg.me_ultrasonic_sensor=Ultrasonic
bg.me_ultrasonic_sensor.description=return distance between Object to Sensor.
bg.me_linefinder=Line Finder
bg.me_linefinder.description=return 0-3 for Left And Right Side State.
bg.me_limitswitch=Limit Switch
bg.me_limitswitch.description=It sends a signal to the controller when it is triggered. 
bg.me_shutter=Shutter
bg.me_shutter.description=It sends a signal to the DSLR Camera for shot and focus.
bg.me_motordriver=Motor
bg.me_motordriver.description=Motor can use M1, M2, Port_1 and Port_2.
bg.me_servodriver=Servo
bg.me_servodriver.description=Servo can use Port_1 and Port_2,device can use 1 and 2.
bg.me_stepper_motor=Stepper
bg.me_stepper_motor.description=Mini stepper motor driver base on A4988. Compatible with 4 and 6 wire stepper motors.
bg.me_infraredreceiver=Infrared receiver
bg.me_infraredreceiver.description=Receive Data from Infrared Controller
bg.me_bluetooth_read=Bluetooth read
bg.me_bluetooth_read.description=Bluetooth Read Byte Data
bg.me_bluetooth_write=Bluetooth write
bg.me_bluetooth_write.description=Bluetooth Write Byte Data
bg.me_bluetooth_commands=Bluetooth Commands
bg.me_bluetooth_commands.description=Commands Parser For Android App's Communication.  
bg.me_bluetooth_command=Bluetooth Command
bg.me_bluetooth_command.description=return (0:module,1:device ID,2:mode,3:port,4:value)
bg.me_led_rgb=Led RGB
bc.me_led_num=Led
bc.me_led_red=Red
bc.me_led_green=Green
bc.me_led_blue=Blue
# Makeblock End
              